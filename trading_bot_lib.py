# trading_bot_volume_fixed_part1.py - PH·∫¶N 1: CORE SYSTEM & BASE BOT
import json
import hmac
import hashlib
import time
import threading
import urllib.request
import urllib.parse
import numpy as np
import websocket
import logging
import requests
import os
import math
import traceback
import random
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor

# ========== C·∫§U H√åNH LOGGING ==========
def setup_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(module)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('bot_errors.log')
        ]
    )
    return logging.getLogger()

logger = setup_logging()

# ========== H√ÄM TELEGRAM ==========
def send_telegram(message, chat_id=None, reply_markup=None, bot_token=None, default_chat_id=None):
    if not bot_token:
        return
    
    chat_id = chat_id or default_chat_id
    if not chat_id:
        return
    
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup)
    
    try:
        response = requests.post(url, json=payload, timeout=15)
    except Exception:
        pass

# ========== MENU TELEGRAM HO√ÄN CH·ªàNH ==========
def create_cancel_keyboard():
    return {
        "keyboard": [[{"text": "‚ùå H·ªßy b·ªè"}]],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_strategy_keyboard():
    return {
        "keyboard": [
            [{"text": "üìä Volume & MACD System"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_exit_strategy_keyboard():
    return {
        "keyboard": [
            [{"text": "üéØ Ch·ªâ TP/SL c·ªë ƒë·ªãnh"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_bot_mode_keyboard():
    return {
        "keyboard": [
            [{"text": "ü§ñ Bot Tƒ©nh - Coin c·ª• th·ªÉ"}, {"text": "üîÑ Bot ƒê·ªông - T·ª± t√¨m coin"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_symbols_keyboard(strategy=None):
    try:
        symbols = get_all_usdt_pairs(limit=12)
        if not symbols:
            symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "DOGEUSDT", "XRPUSDT", "DOTUSDT", "LINKUSDT"]
    except:
        symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "DOGEUSDT", "XRPUSDT", "DOTUSDT", "LINKUSDT"]
    
    keyboard = []
    row = []
    for symbol in symbols:
        row.append({"text": symbol})
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_main_menu():
    return {
        "keyboard": [
            [{"text": "üìä Danh s√°ch Bot"}, {"text": "üìä Th·ªëng k√™"}],
            [{"text": "‚ûï Th√™m Bot"}, {"text": "‚õî D·ª´ng Bot"}],
            [{"text": "üí∞ S·ªë d∆∞"}, {"text": "üìà V·ªã th·∫ø"}],
            [{"text": "‚öôÔ∏è C·∫•u h√¨nh"}, {"text": "üéØ Chi·∫øn l∆∞·ª£c"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def create_leverage_keyboard(strategy=None):
    leverages = ["3", "5", "10", "15", "20", "25", "50", "75", "100"]
    
    keyboard = []
    row = []
    for lev in leverages:
        row.append({"text": f"{lev}x"})
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_percent_keyboard():
    return {
        "keyboard": [
            [{"text": "1"}, {"text": "3"}, {"text": "5"}, {"text": "10"}],
            [{"text": "15"}, {"text": "20"}, {"text": "25"}, {"text": "50"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_tp_keyboard():
    return {
        "keyboard": [
            [{"text": "50"}, {"text": "100"}, {"text": "200"}],
            [{"text": "300"}, {"text": "500"}, {"text": "1000"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_sl_keyboard():
    return {
        "keyboard": [
            [{"text": "0"}, {"text": "50"}, {"text": "100"}],
            [{"text": "150"}, {"text": "200"}, {"text": "500"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_bot_count_keyboard():
    return {
        "keyboard": [
            [{"text": "1"}, {"text": "2"}, {"text": "3"}],
            [{"text": "5"}, {"text": "10"}],
            [{"text": "‚ùå H·ªßy b·ªè"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

# ========== H√ÄM KI·ªÇM TRA ƒê√íN B·∫®Y T·ªêI ƒêA ==========
def get_max_leverage(symbol, api_key, api_secret):
    """L·∫•y ƒë√≤n b·∫©y t·ªëi ƒëa cho m·ªôt symbol"""
    try:
        url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
        data = binance_api_request(url)
        if not data:
            return 100
        
        for s in data['symbols']:
            if s['symbol'] == symbol.upper():
                for f in s['filters']:
                    if f['filterType'] == 'LEVERAGE':
                        if 'maxLeverage' in f:
                            return int(f['maxLeverage'])
                break
        return 100
    except Exception as e:
        logger.error(f"L·ªói l·∫•y ƒë√≤n b·∫©y t·ªëi ƒëa {symbol}: {str(e)}")
        return 100

# ========== H·ªÜ TH·ªêNG PH√ÇN T√çCH VOLUME, MACD, RSI & EMA ==========
class VolumeMACDStrategy:
    """H·ªÜ TH·ªêNG PH√ÇN T√çCH D·ª∞A TR√äN VOLUME, MACD, RSI & EMA"""
    
    def __init__(self):
        self.volume_threshold = 2
        self.volume_decrease_threshold = 0.5
        self.small_body_threshold = 0.1
        
    def get_klines(self, symbol, interval, limit):
        """L·∫•y d·ªØ li·ªáu n·∫øn t·ª´ Binance"""
        try:
            url = "https://fapi.binance.com/fapi/v1/klines"
            params = {
                'symbol': symbol.upper(),
                'interval': interval,
                'limit': limit
            }
            return binance_api_request(url, params=params)
        except Exception as e:
            return None
    
    def calculate_ema(self, prices, period):
        """T√≠nh EMA (Exponential Moving Average)"""
        if len(prices) < period:
            return None
        
        ema_values = []
        multiplier = 2 / (period + 1)
        
        sma = sum(prices[:period]) / period
        ema_values.append(sma)
        
        for i in range(period, len(prices)):
            ema = (prices[i] * multiplier) + (ema_values[-1] * (1 - multiplier))
            ema_values.append(ema)
        
        return ema_values
    
    def calculate_macd(self, prices, fast_period=12, slow_period=26, signal_period=9):
        """T√≠nh MACD (Moving Average Convergence Divergence)"""
        if len(prices) < slow_period:
            return None, None, None
        
        ema_fast = self.calculate_ema(prices, fast_period)
        ema_slow = self.calculate_ema(prices, slow_period)
        
        if not ema_fast or not ema_slow:
            return None, None, None
        
        min_length = min(len(ema_fast), len(ema_slow))
        ema_fast = ema_fast[-min_length:]
        ema_slow = ema_slow[-min_length:]
        prices = prices[-min_length:]
        
        macd_line = [ema_fast[i] - ema_slow[i] for i in range(len(ema_fast))]
        signal_line = self.calculate_ema(macd_line, signal_period)
        
        if not signal_line:
            return None, None, None
        
        histogram = [macd_line[i] - signal_line[i] for i in range(len(signal_line))]
        
        return macd_line, signal_line, histogram
    
    def calculate_rsi(self, prices, period=14):
        """T√≠nh RSI (Relative Strength Index)"""
        if len(prices) < period + 1:
            return None
        
        gains = []
        losses = []
        
        for i in range(1, len(prices)):
            change = prices[i] - prices[i-1]
            gains.append(max(change, 0))
            losses.append(max(-change, 0))
        
        rsi_values = []
        for i in range(period, len(gains)):
            avg_gain = sum(gains[i-period:i]) / period
            avg_loss = sum(losses[i-period:i]) / period
            
            if avg_loss == 0:
                rsi = 100
            else:
                rs = avg_gain / avg_loss
                rsi = 100 - (100 / (1 + rs))
            
            rsi_values.append(rsi)
        
        return rsi_values
    
    def is_doji(self, open_price, high, low, close):
        """Ki·ªÉm tra n·∫øn doji (th√¢n n·∫øn nh·ªè)"""
        body_size = abs(close - open_price)
        total_range = high - low
        
        if total_range == 0:
            return False
        
        body_ratio = body_size / total_range
        return body_ratio < self.small_body_threshold
    
    def analyze_volume_macd(self, symbol):
        """PH√ÇN T√çCH VOLUME, MACD, RSI & EMA THEO 3 KHUNG 1m, 5m, 15m"""
        try:
            intervals = ['1m', '5m', '15m']
            signals = []
            
            for interval in intervals:
                klines = self.get_klines(symbol, interval, 100)
                if not klines or len(klines) < 50:
                    continue
                
                current_candle = klines[-2]
                prev_candles = klines[-30:-2]
                
                open_price = float(current_candle[1])
                close_price = float(current_candle[4])
                high_price = float(current_candle[2])
                low_price = float(current_candle[3])
                current_volume = float(current_candle[5])
                
                volumes = [float(candle[5]) for candle in prev_candles]
                avg_volume = np.mean(volumes) if volumes else current_volume
                
                volume_ratio = current_volume / avg_volume if avg_volume > 0 else 1
                volume_increase = volume_ratio > self.volume_threshold
                volume_decrease = volume_ratio < self.volume_decrease_threshold
                
                is_green = close_price > open_price
                is_red = close_price < open_price
                is_doji_candle = self.is_doji(open_price, high_price, low_price, close_price)
                
                close_prices = [float(candle[4]) for candle in klines]
                
                macd_line, signal_line, histogram = self.calculate_macd(close_prices)
                rsi_values = self.calculate_rsi(close_prices)
                ema_20 = self.calculate_ema(close_prices, 20)
                
                macd_bullish = False
                macd_bearish = False
                rsi_overbought = False
                rsi_oversold = False
                price_above_ema = False
                price_below_ema = False
                
                if macd_line and signal_line and len(macd_line) > 1 and len(signal_line) > 1:
                    macd_bullish = macd_line[-1] > signal_line[-1] and macd_line[-2] <= signal_line[-2]
                    macd_bearish = macd_line[-1] < signal_line[-1] and macd_line[-2] >= signal_line[-2]
                
                if rsi_values and len(rsi_values) > 0:
                    current_rsi = rsi_values[-1]
                    rsi_overbought = current_rsi > 75
                    rsi_oversold = current_rsi < 25
                
                if ema_20 and len(ema_20) > 0:
                    current_ema_20 = ema_20[-1]
                    price_above_ema = close_price > current_ema_20
                    price_below_ema = close_price < current_ema_20
                
                signal = "NEUTRAL"
                
                if volume_increase and macd_bullish and is_green:
                    signal = "BUY"
                elif volume_increase and macd_bearish and is_red:
                    signal = "SELL"
                elif volume_decrease and is_doji_candle:
                    signal = "BUY"
                
                signals.append((interval, signal, {
                    'volume_ratio': volume_ratio,
                    'macd_bullish': macd_bullish,
                    'macd_bearish': macd_bearish,
                    'rsi': rsi_values[-1] if rsi_values else 50,
                    'price_above_ema': price_above_ema,
                    'price_below_ema': price_below_ema
                }))
            
            if not signals:
                return "NEUTRAL"
                
            buy_count = sum(1 for _, s, _ in signals if s == "BUY")
            sell_count = sum(1 for _, s, _ in signals if s == "SELL")
            
            if buy_count > sell_count:
                final_signal = "BUY"
            elif sell_count > buy_count:
                final_signal = "SELL"
            else:
                final_signal = "NEUTRAL"
            
            return final_signal
            
        except Exception as e:
            return "NEUTRAL"
    
    def check_exit_signal(self, symbol, current_side):
        """KI·ªÇM TRA T√çN HI·ªÜU THO√ÅT L·ªÜNH KHI ƒêANG C√ì V·ªä TH·∫æ"""
        try:
            if not current_side:
                return False
                
            klines = self.get_klines(symbol, '5m', 50)
            if not klines or len(klines) < 30:
                return False
            
            current_candle = klines[-2]
            open_price = float(current_candle[1])
            close_price = float(current_candle[4])
            high_price = float(current_candle[2])
            low_price = float(current_candle[3])
            current_volume = float(current_candle[5])
            
            prev_candles = klines[-30:-2]
            volumes = [float(candle[5]) for candle in prev_candles]
            avg_volume = np.mean(volumes) if volumes else current_volume
            
            volume_ratio = current_volume / avg_volume if avg_volume > 0 else 1
            volume_decrease = volume_ratio < self.volume_decrease_threshold
            
            close_prices = [float(candle[4]) for candle in klines]
            
            rsi_values = self.calculate_rsi(close_prices)
            ema_20 = self.calculate_ema(close_prices, 20)
            
            rsi_overbought = False
            rsi_oversold = False
            price_above_ema = False
            price_below_ema = False
            
            if rsi_values and len(rsi_values) > 0:
                current_rsi = rsi_values[-1]
                rsi_overbought = current_rsi > 85
                rsi_oversold = current_rsi < 15
            
            if ema_20 and len(ema_20) > 0:
                current_ema_20 = ema_20[-1]
                price_above_ema = close_price > current_ema_20
                price_below_ema = close_price < current_ema_20
            
            if current_side == "BUY":
                if (rsi_overbought or (rsi_oversold and price_below_ema)) and volume_decrease:
                    return True
            
            elif current_side == "SELL":
                if (rsi_oversold or (rsi_overbought and price_above_ema)) and volume_decrease:
                    return True
            
            return False
            
        except Exception as e:
            return False

# ========== SMART COIN FINDER N√ÇNG C·∫§P ==========
class SmartCoinFinder:
    """T√åM COIN TH√îNG MINH - L·ªåC ƒê√íN B·∫®Y TR∆Ø·ªöC, VOLUME SAU"""
    
    def __init__(self, api_key, api_secret):
        self.api_key = api_key
        self.api_secret = api_secret
        self.analyzer = VolumeMACDStrategy()
        self.leverage_cache = {}
        self.volume_cache = {}
        self.qualified_symbols_cache = {}
        self.cache_timeout = 300
        self.last_cache_update = 0
        
    def get_24h_volume(self, symbol):
        """L·∫•y volume giao d·ªãch 24h c·ªßa symbol"""
        try:
            if symbol in self.volume_cache:
                return self.volume_cache[symbol]
                
            url = "https://fapi.binance.com/fapi/v1/ticker/24hr"
            params = {'symbol': symbol.upper()}
            data = binance_api_request(url, params=params)
            if data and 'volume' in data:
                volume = float(data['volume'])
                self.volume_cache[symbol] = volume
                return volume
        except Exception:
            pass
        return 0

    def get_pre_filtered_symbols(self, target_leverage):
        """L·∫§Y DANH S√ÅCH COIN ƒê√É L·ªåC THEO ƒê√íN B·∫®Y TR∆Ø·ªöC"""
        try:
            current_time = time.time()
            
            cache_key = f"lev_{target_leverage}"
            if (cache_key in self.qualified_symbols_cache and 
                self.qualified_symbols_cache[cache_key] and
                current_time - self.last_cache_update < self.cache_timeout):
                return self.qualified_symbols_cache[cache_key]
            
            all_symbols = get_all_usdt_pairs(limit=600)
            if not all_symbols:
                if cache_key in self.qualified_symbols_cache:
                    return self.qualified_symbols_cache[cache_key]
                return []
            
            qualified_by_leverage = []
            
            def check_leverage_only(symbol):
                try:
                    max_leverage = self.get_symbol_leverage(symbol)
                    return symbol if max_leverage >= target_leverage else None
                except:
                    return None
            
            with ThreadPoolExecutor(max_workers=15) as executor:
                results = list(executor.map(check_leverage_only, all_symbols))
            
            qualified_by_leverage = [symbol for symbol in results if symbol is not None]
            
            final_qualified = []
            for symbol in qualified_by_leverage:
                try:
                    volume_24h = self.get_24h_volume(symbol)
                    if 1000000 <= volume_24h <= 1000000000:
                        final_qualified.append(symbol)
                except:
                    continue
            
            self.qualified_symbols_cache[cache_key] = final_qualified
            self.last_cache_update = current_time
            
            return final_qualified
            
        except Exception as e:
            logger.error(f"L·ªói l·ªçc coin theo ƒë√≤n b·∫©y: {str(e)}")
            if cache_key in self.qualified_symbols_cache:
                return self.qualified_symbols_cache[cache_key]
            return []

    def get_symbol_leverage(self, symbol):
        if symbol in self.leverage_cache:
            return self.leverage_cache[symbol]
        
        max_leverage = get_max_leverage(symbol, self.api_key, self.api_secret)
        self.leverage_cache[symbol] = max_leverage
        return max_leverage

    def find_coin_by_direction(self, target_direction, target_leverage, excluded_symbols=None):
        """T√åM 1 COIN DUY NH·∫§T - L·ªåC ƒê√íN B·∫®Y TR∆Ø·ªöC, T√çN HI·ªÜU SAU"""
        try:
            if excluded_symbols is None:
                excluded_symbols = set()
            
            qualified_symbols = self.get_pre_filtered_symbols(target_leverage)
            if not qualified_symbols:
                return None
            
            available_symbols = [s for s in qualified_symbols if s not in excluded_symbols]
            
            if not available_symbols:
                return None
            
            random.shuffle(available_symbols)
            symbols_to_check = available_symbols[:30]
            
            for symbol in symbols_to_check:
                try:
                    signal = self.analyzer.analyze_volume_macd(symbol)
                    
                    if signal == target_direction:
                        max_leverage = self.get_symbol_leverage(symbol)
                        volume_24h = self.get_24h_volume(symbol)
                        
                        return {
                            'symbol': symbol,
                            'direction': target_direction,
                            'max_leverage': max_leverage,
                            'volume_24h': volume_24h,
                            'score': 0.8,
                            'qualified': True
                        }
                        
                except Exception:
                    continue
            
            return None
                
        except Exception as e:
            logger.error(f"L·ªói t√¨m coin: {str(e)}")
            return None

# ========== QU·∫¢N L√ù COIN CHUNG ==========
class CoinManager:
    _instance = None
    _lock = threading.Lock()
    
    def __new__(cls):
        with cls._lock:
            if cls._instance is None:
                cls._instance = super(CoinManager, cls).__new__(cls)
                cls._instance.managed_coins = {}
                cls._instance.config_coin_count = {}
        return cls._instance
    
    def register_coin(self, symbol, bot_id, strategy, config_key=None):
        with self._lock:
            if symbol not in self.managed_coins:
                self.managed_coins[symbol] = {
                    "strategy": strategy, 
                    "bot_id": bot_id,
                    "config_key": config_key
                }
                return True
            return False
    
    def unregister_coin(self, symbol):
        with self._lock:
            if symbol in self.managed_coins:
                del self.managed_coins[symbol]
                return True
            return False
    
    def is_coin_managed(self, symbol):
        with self._lock:
            return symbol in self.managed_coins
    
    def get_managed_coins(self):
        with self._lock:
            return self.managed_coins.copy()

# ========== API BINANCE ==========
def sign(query, api_secret):
    try:
        return hmac.new(api_secret.encode(), query.encode(), hashlib.sha256).hexdigest()
    except Exception as e:
        logger.error(f"L·ªói t·∫°o ch·ªØ k√Ω: {str(e)}")
        return ""

def binance_api_request(url, method='GET', params=None, headers=None):
    max_retries = 3
    for attempt in range(max_retries):
        try:
            if method.upper() == 'GET':
                if params:
                    query = urllib.parse.urlencode(params)
                    url = f"{url}?{query}"
                req = urllib.request.Request(url, headers=headers or {})
            else:
                data = urllib.parse.urlencode(params).encode() if params else None
                req = urllib.request.Request(url, data=data, headers=headers or {}, method=method)
            
            with urllib.request.urlopen(req, timeout=15) as response:
                if response.status == 200:
                    return json.loads(response.read().decode())
                else:
                    if response.status == 401:
                        return None
                    if response.status == 429:
                        time.sleep(2 ** attempt)
                    elif response.status >= 500:
                        time.sleep(1)
                    continue
        except urllib.error.HTTPError as e:
            if e.code == 401:
                return None
            if e.code == 429:
                time.sleep(2 ** attempt)
            elif e.code >= 500:
                time.sleep(1)
            continue
        except Exception as e:
            time.sleep(1)
    
    return None

def get_all_usdt_pairs(limit=600):
    try:
        url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
        data = binance_api_request(url)
        if not data:
            return []
        
        usdt_pairs = []
        for symbol_info in data.get('symbols', []):
            symbol = symbol_info.get('symbol', '')
            if symbol.endswith('USDT') and symbol_info.get('status') == 'TRADING':
                usdt_pairs.append(symbol)
        
        return usdt_pairs[:limit] if limit else usdt_pairs
        
    except Exception as e:
        return []

def get_step_size(symbol, api_key, api_secret):
    url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
    try:
        data = binance_api_request(url)
        if not data:
            return 0.001
        for s in data['symbols']:
            if s['symbol'] == symbol.upper():
                for f in s['filters']:
                    if f['filterType'] == 'LOT_SIZE':
                        return float(f['stepSize'])
    except Exception:
        pass
    return 0.001

def set_leverage(symbol, lev, api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "leverage": lev,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/leverage?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        response = binance_api_request(url, method='POST', headers=headers)
        if response is None:
            return False
        if response and 'leverage' in response:
            return True
        return False
    except Exception as e:
        logger.error(f"L·ªói thi·∫øt l·∫≠p ƒë√≤n b·∫©y: {str(e)}")
        return False

def get_balance(api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v2/account?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        data = binance_api_request(url, headers=headers)
        if not data:
            return None
        for asset in data['assets']:
            if asset['asset'] == 'USDT':
                return float(asset['availableBalance'])
        return 0
    except Exception as e:
        logger.error(f"L·ªói l·∫•y s·ªë d∆∞: {str(e)}")
        return None

def place_order(symbol, side, qty, api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "side": side,
            "type": "MARKET",
            "quantity": qty,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/order?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        return binance_api_request(url, method='POST', headers=headers)
    except Exception as e:
        logger.error(f"L·ªói ƒë·∫∑t l·ªánh: {str(e)}")
    return None

def cancel_all_orders(symbol, api_key, api_secret):
    try:
        ts = int(time.time() * 1000)
        params = {"symbol": symbol.upper(), "timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v1/allOpenOrders?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        binance_api_request(url, method='DELETE', headers=headers)
        return True
    except Exception as e:
        logger.error(f"L·ªói h·ªßy l·ªánh: {str(e)}")
    return False

def get_current_price(symbol):
    try:
        url = f"https://fapi.binance.com/fapi/v1/ticker/price?symbol={symbol.upper()}"
        data = binance_api_request(url)
        if data and 'price' in data:
            return float(data['price'])
    except Exception as e:
        logger.error(f"L·ªói l·∫•y gi√°: {str(e)}")
    return 0

def get_positions(symbol=None, api_key=None, api_secret=None):
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        if symbol:
            params["symbol"] = symbol.upper()
        query = urllib.parse.urlencode(params)
        sig = sign(query, api_secret)
        url = f"https://fapi.binance.com/fapi/v2/positionRisk?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': api_key}
        
        positions = binance_api_request(url, headers=headers)
        if not positions:
            return []
        if symbol:
            for pos in positions:
                if pos['symbol'] == symbol.upper():
                    return [pos]
        return positions
    except Exception as e:
        logger.error(f"L·ªói l·∫•y v·ªã th·∫ø: {str(e)}")
    return []

# ========== WEBSOCKET MANAGER ==========
class WebSocketManager:
    def __init__(self):
        self.connections = {}
        self.executor = ThreadPoolExecutor(max_workers=10)
        self._lock = threading.Lock()
        self._stop_event = threading.Event()
        
    def add_symbol(self, symbol, callback):
        symbol = symbol.upper()
        with self._lock:
            if symbol not in self.connections:
                self._create_connection(symbol, callback)
                
    def _create_connection(self, symbol, callback):
        if self._stop_event.is_set():
            return
        stream = f"{symbol.lower()}@trade"
        url = f"wss://fstream.binance.com/ws/{stream}"
        
        def on_message(ws, message):
            try:
                data = json.loads(message)
                if 'p' in data:
                    price = float(data['p'])
                    self.executor.submit(callback, price)
            except Exception:
                pass
                
        def on_error(ws, error):
            if not self._stop_event.is_set():
                time.sleep(5)
                self._reconnect(symbol, callback)
            
        def on_close(ws, close_status_code, close_msg):
            if not self._stop_event.is_set() and symbol in self.connections:
                time.sleep(5)
                self._reconnect(symbol, callback)
                
        ws = websocket.WebSocketApp(
            url,
            on_message=on_message,
            on_error=on_error,
            on_close=on_close
        )
        
        thread = threading.Thread(target=ws.run_forever, daemon=True)
        thread.start()
        
        self.connections[symbol] = {
            'ws': ws,
            'thread': thread,
            'callback': callback
        }
        
    def _reconnect(self, symbol, callback):
        self.remove_symbol(symbol)
        self._create_connection(symbol, callback)
        
    def remove_symbol(self, symbol):
        symbol = symbol.upper()
        with self._lock:
            if symbol in self.connections:
                try:
                    self.connections[symbol]['ws'].close()
                except Exception:
                    pass
                del self.connections[symbol]
                
    def stop(self):
        self._stop_event.set()
        for symbol in list(self.connections.keys()):
            self.remove_symbol(symbol)

# ========== KH·ªûI T·∫†O GLOBAL INSTANCES ==========
coin_manager = CoinManager()

# ========== BASE BOT N√ÇNG C·∫§P ==========
class BaseBot:
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, 
                 telegram_bot_token, telegram_chat_id, strategy_name, config_key=None, bot_id=None):
        
        self.symbol = symbol.upper() if symbol else None
        self.lev = lev
        self.percent = percent
        self.tp = tp
        self.sl = sl
        self.ws_manager = ws_manager
        self.api_key = api_key
        self.api_secret = api_secret
        self.telegram_bot_token = telegram_bot_token
        self.telegram_chat_id = telegram_chat_id
        self.strategy_name = strategy_name
        self.config_key = config_key
        self.bot_id = bot_id or f"{strategy_name}_{int(time.time())}_{random.randint(1000, 9999)}"
        
        self.status = "searching"
        self.side = ""
        self.qty = 0
        self.entry = 0
        self.prices = []
        self.current_price = 0
        self.position_open = False
        self._stop = False
        
        self.last_trade_time = 0
        self.last_close_time = 0
        self.last_position_check = 0
        self.last_error_log_time = 0
        
        self.cooldown_period = 3
        self.position_check_interval = 30
        
        self._close_attempted = False
        self._last_close_attempt = 0
        
        self.should_be_removed = False
        
        self.position_balance_check = 0
        self.balance_check_interval = 60
        
        self.coin_manager = CoinManager()
        self.coin_finder = SmartCoinFinder(api_key, api_secret)
        
        self.current_target_direction = None
        self.last_find_time = 0
        self.find_interval = 60
        
        # Th√™m bi·∫øn qu·∫£n l√Ω nh·ªìi l·ªánh
        self.entry_base = 0
        self.average_down_count = 0
        self.last_average_down_time = 0
        self.average_down_cooldown = 60
        
        self.check_position_status()
        if self.symbol:
            self.ws_manager.add_symbol(self.symbol, self._handle_price_update)
        
        self.thread = threading.Thread(target=self._run, daemon=True)
        self.thread.start()

    def _register_coin_with_retry(self, symbol):
        max_retries = 3
        for attempt in range(max_retries):
            success = self.coin_manager.register_coin(symbol, self.bot_id, self.strategy_name, self.config_key)
            if success:
                return True
            time.sleep(0.5)
        return False

    def log(self, message):
        bot_info = f"[Bot {self.bot_id}]" if hasattr(self, 'bot_id') else ""
        logger.info(f"{bot_info} [{self.symbol or 'NO_COIN'} - {self.strategy_name}] {message}")
        if self.telegram_bot_token and self.telegram_chat_id:
            symbol_info = f"<b>{self.symbol}</b>" if self.symbol else "<i>ƒêang t√¨m coin...</i>"
            send_telegram(f"{symbol_info} ({self.strategy_name} - Bot {self.bot_id}): {message}", 
                         bot_token=self.telegram_bot_token, 
                         default_chat_id=self.telegram_chat_id)

    def _handle_price_update(self, price):
        if self._stop or not price or price <= 0:
            return
        try:
            price_float = float(price)
            self.current_price = price_float
            self.prices.append(price_float)
            if len(self.prices) > 100:
                self.prices = self.prices[-100:]
        except Exception:
            pass

    def get_signal(self):
        raise NotImplementedError("Ph∆∞∆°ng th·ª©c get_signal c·∫ßn ƒë∆∞·ª£c tri·ªÉn khai")

    def get_target_direction(self):
        try:
            all_positions = get_positions(api_key=self.api_key, api_secret=self.api_secret)
            
            buy_count = 0
            sell_count = 0
            
            for pos in all_positions:
                position_amt = float(pos.get('positionAmt', 0))
                if position_amt != 0:
                    if position_amt > 0:
                        buy_count += 1
                    else:
                        sell_count += 1
            
            total = buy_count + sell_count
            
            if total == 0:
                direction = "BUY" if random.random() > 0.5 else "SELL"
                return direction
            
            if buy_count > sell_count:
                return "SELL"
            elif sell_count > buy_count:
                return "BUY"
            else:
                direction = "BUY" if random.random() > 0.5 else "SELL"
                return direction
                
        except Exception as e:
            return "BUY" if random.random() > 0.5 else "SELL"

    def verify_leverage_and_switch(self):
        if not self.symbol or not self.position_open:
            return True
            
        try:
            current_leverage = self.coin_finder.get_symbol_leverage(self.symbol)
            
            if current_leverage < self.lev:
                if self.position_open:
                    self.close_position(f"ƒê√≤n b·∫©y kh√¥ng ƒë·ªß ({current_leverage}x < {self.lev}x)")
                
                self.ws_manager.remove_symbol(self.symbol)
                self.coin_manager.unregister_coin(self.symbol)
                self.symbol = None
                self.status = "searching"
                return False
                
            return True
            
        except Exception as e:
            return True

    def find_and_set_coin(self):
        try:
            self.current_target_direction = self.get_target_direction()
            managed_coins = self.coin_manager.get_managed_coins()
            excluded_symbols = set(managed_coins.keys())
            
            coin_data = self.coin_finder.find_coin_by_direction(
                self.current_target_direction, 
                self.lev,
                excluded_symbols
            )
        
            if coin_data is None:
                return False
                
            if not coin_data.get('qualified', False):
                return False
            
            new_symbol = coin_data['symbol']
            max_leverage = coin_data.get('max_leverage', 100)
            
            if max_leverage < self.lev:
                return False
            
            if self._register_coin_with_retry(new_symbol):
                if self.symbol:
                    self.ws_manager.remove_symbol(self.symbol)
                    self.coin_manager.unregister_coin(self.symbol)
                
                self.symbol = new_symbol
                self.ws_manager.add_symbol(self.symbol, self._handle_price_update)
                
                self.status = "waiting"
                return True
            else:
                return False
                
        except Exception as e:
            return False

    def get_actual_pnl(self):
        """L·∫•y PnL th·ª±c t·∫ø t·ª´ Binance"""
        try:
            positions = get_positions(self.symbol, self.api_key, self.api_secret)
            if not positions:
                return 0, 0
                
            for pos in positions:
                if pos['symbol'] == self.symbol:
                    unrealized_pnl = float(pos.get('unRealizedProfit', 0))
                    entry_price = float(pos.get('entryPrice', 0))
                    position_amt = float(pos.get('positionAmt', 0))
                    leverage = float(pos.get('leverage', 1))
                    
                    if position_amt == 0:
                        return 0, 0
                        
                    # T√≠nh ROI th·ª±c t·∫ø
                    position_size = abs(position_amt) * entry_price
                    invested = position_size / leverage
                    roi = (unrealized_pnl / invested) * 100 if invested > 0 else 0
                    
                    return unrealized_pnl, roi
                    
            return 0, 0
        except Exception as e:
            return 0, 0

    def check_position_status(self):
        if not self.symbol:
            return
            
        try:
            positions = get_positions(self.symbol, self.api_key, self.api_secret)
            if not positions:
                self._reset_position()
                return
            
            position_found = False
            for pos in positions:
                if pos['symbol'] == self.symbol:
                    position_amt = float(pos.get('positionAmt', 0))
                    if abs(position_amt) > 0:
                        position_found = True
                        self.position_open = True
                        self.status = "open"
                        self.side = "BUY" if position_amt > 0 else "SELL"
                        self.qty = position_amt
                        self.entry = float(pos.get('entryPrice', 0))
                        
                        # C·∫≠p nh·∫≠t PnL th·ª±c t·∫ø
                        unrealized_pnl, roi = self.get_actual_pnl()
                        self.log(f"üìä V·ªã th·∫ø th·ª±c t·∫ø: {self.side} {abs(self.qty):.4f} | Entry: {self.entry:.4f} | PnL: {unrealized_pnl:.2f} USDT")
                        break
                    else:
                        position_found = True
                        self._reset_position()
                        break
            
            if not position_found:
                self._reset_position()
                
        except Exception as e:
            if time.time() - self.last_error_log_time > 10:
                self.log(f"üí• L·ªói check position status: {str(e)}")
                self.last_error_log_time = time.time()

     def check_averaging_down(self):
        if not self.position_open or self.entry_base <= 0:
            return False
            
        try:
            current_price = self.current_price or get_current_price(self.symbol)
            if current_price <= 0:
                return False
            
            if self.side == "BUY":
                profit = (current_price - self.entry_base) * abs(self.qty)
            else:
                profit = (self.entry_base - current_price) * abs(self.qty)
                
            invested = self.entry_base * abs(self.qty) / self.lev
            if invested <= 0:
                return False
                
            roi = (profit / invested) * 100
            
            current_time = time.time()
            
            # C·∫§P S·ªê C·ªòNG: L·∫ßn 1: -100%, L·∫ßn 2: -200%, L·∫ßn 3: -300%, ...
            required_roi_threshold = -100 * (self.average_down_count + 1)
            
            if (roi <= required_roi_threshold and 
                current_time - self.last_average_down_time > self.average_down_cooldown):
                
                self.log(f"üìâ ƒê·∫°t {required_roi_threshold}% ROI t·ª´ m·ªëc neo, th·ª±c hi·ªán nh·ªìi l·ªánh l·∫ßn {self.average_down_count + 1}. ROI: {roi:.2f}%")
                return self.average_down()
                
            return False
            
        except Exception as e:
            return False

    def average_down(self):
        try:
            if not self.position_open:
                return False
                
            balance = get_balance(self.api_key, self.api_secret)
            if balance is None or balance <= 0:
                return False

            current_price = self.current_price or get_current_price(self.symbol)
            if current_price <= 0:
                return False

            step_size = get_step_size(self.symbol, self.api_key, self.api_secret)
            usd_amount = balance * (self.percent / 100)
            additional_qty = (usd_amount * self.lev) / current_price
            
            if step_size > 0:
                additional_qty = math.floor(additional_qty / step_size) * step_size
                additional_qty = round(additional_qty, 8)

            if additional_qty < step_size:
                return False

            result = place_order(self.symbol, self.side, additional_qty, self.api_key, self.api_secret)

            if result and 'orderId' in result:
                executed_qty = float(result.get('executedQty', 0))
                avg_price = float(result.get('avgPrice', current_price))

                if executed_qty > 0:
                    total_qty = abs(self.qty) + executed_qty
                    self.entry = (self.entry * abs(self.qty) + avg_price * executed_qty) / total_qty
                    self.qty = total_qty if self.side == "BUY" else -total_qty
                    
                    # GI·ªÆ NGUY√äN entry_base (m·ªëc neo ban ƒë·∫ßu)
                    self.average_down_count += 1
                    self.last_average_down_time = time.time()

                    message = (
                        f"üìà <b>ƒê√É NH·ªíI L·ªÜNH L·∫¶N {self.average_down_count} - {self.symbol}</b>\n"
                        f"üìå H∆∞·ªõng: {self.side}\n"
                        f"üè∑Ô∏è Gi√° v√†o ban ƒë·∫ßu: {self.entry_base:.4f}\n"
                        f"üè∑Ô∏è Gi√° trung b√¨nh m·ªõi: {self.entry:.4f}\n"
                        f"üìä Kh·ªëi l∆∞·ª£ng th√™m: {executed_qty:.4f}\n"
                        f"üìä T·ªïng kh·ªëi l∆∞·ª£ng: {total_qty:.4f}\n"
                        f"üíµ Gi√° tr·ªã nh·ªìi: {executed_qty * avg_price:.2f} USDT\n"
                        f"üí∞ ƒê√≤n b·∫©y: {self.lev}x\n"
                        f"üéØ Ng∆∞·ª°ng nh·ªìi ti·∫øp theo: {-100 * (self.average_down_count + 1)}%"
                    )
                    self.log(message)
                    return True
                else:
                    return False
            else:
                return False
                
        except Exception as e:
            return False

    def _reset_position(self):
        self.position_open = False
        self.status = "searching" if not self.symbol else "waiting"
        self.side = ""
        self.qty = 0
        self.entry = 0
        self._close_attempted = False
        self._last_close_attempt = 0
        self.entry_base = 0
        self.average_down_count = 0  # Reset s·ªë l·∫ßn nh·ªìi v·ªÅ 0

    def _force_reset(self):
        """Reset m·∫°nh tay, kh√¥ng ph·ª• thu·ªôc v√†o tr·∫°ng th√°i hi·ªán t·∫°i"""
        if self.symbol:
            self.coin_manager.unregister_coin(self.symbol)
            self.ws_manager.remove_symbol(self.symbol)
        
        self.position_open = False
        self.status = "searching"
        self.side = ""
        self.qty = 0
        self.entry = 0
        self.entry_base = 0
        self.average_down_count = 0  # Reset s·ªë l·∫ßn nh·ªìi v·ªÅ 0
        self._close_attempted = False
        self.symbol = None

    def _run(self):
        while not self._stop:
            try:
                current_time = time.time()
                
                if current_time - getattr(self, '_last_leverage_check', 0) > 60:
                    if not self.verify_leverage_and_switch():
                        if self.symbol:
                            self.ws_manager.remove_symbol(self.symbol)
                            self.coin_manager.unregister_coin(self.symbol)
                            self.symbol = None
                        time.sleep(1)
                        continue
                    self._last_leverage_check = current_time
                
                if current_time - self.last_position_check > self.position_check_interval:
                    self.check_position_status()
                    self.last_position_check = time.time()
                              
                if not self.position_open:
                    if not self.symbol:
                        if current_time - self.last_find_time > self.find_interval:
                            self.log("üîç ƒêang t√¨m coin m·ªõi...")
                            success = self.find_and_set_coin()
                            if success:
                                self.log(f"‚úÖ ƒê√£ t√¨m th·∫•y coin: {self.symbol}")
                            else:
                                self.log("‚ùå Kh√¥ng t√¨m th·∫•y coin ph√π h·ª£p")
                            self.last_find_time = current_time
                        time.sleep(1)
                        continue
                    
                    # TH√äM: Lu√¥n g·ªçi get_signal, kh√¥ng check time
                    signal = self.get_signal()
                    
                    if signal and signal != "NEUTRAL":
                        self.log(f"üöÄ Nh·∫≠n ƒë∆∞·ª£c t√≠n hi·ªáu {signal}, chu·∫©n b·ªã m·ªü l·ªánh...")
                        if current_time - self.last_trade_time > 3 and current_time - self.last_close_time > self.cooldown_period:
                            if self.open_position(signal):
                                self.last_trade_time = current_time
                            else:
                                self.log("‚ùå Kh√¥ng th·ªÉ m·ªü l·ªánh, reset symbol...")
                                self._cleanup_symbol()
                        else:
                            self.log(f"‚è≥ ƒêang trong th·ªùi gian ch·ªù gi·ªØa c√°c l·ªánh")
                    else:
                        # TH√äM: Log tr·∫°ng th√°i ch·ªù
                        if current_time - getattr(self, 'last_analysis_time', 0) > 30:
                            self.log("üü° ƒêang ch·ªù t√≠n hi·ªáu t·ª´ Volume MACD...")
                            self.last_analysis_time = current_time
                        time.sleep(1)
                
                else:
                    # LU√îN check TP/SL v√† averaging_down, kh√¥ng ph·ª• thu·ªôc v√†o SL
                    self.check_averaging_down()
                    self.check_tp_sl()
                    
                time.sleep(1)
            
            except Exception as e:
                if time.time() - self.last_error_log_time > 10:
                    self.log(f"‚ùå L·ªói h·ªá th·ªëng: {str(e)}")
                    self.last_error_log_time = time.time()
                time.sleep(1)

    def stop(self):
        self._stop = True
        if self.symbol:
            self.ws_manager.remove_symbol(self.symbol)
        if self.symbol:
            self.coin_manager.unregister_coin(self.symbol)
        if self.symbol:
            cancel_all_orders(self.symbol, self.api_key, self.api_secret)
        self.log(f"üî¥ Bot d·ª´ng")

    def open_position(self, side):
        if side not in ["BUY", "SELL"]:
            return False
            
        try:
            self.check_position_status()
            if self.position_open:
                return False
    
            if self.should_be_removed:
                return False
    
            current_leverage = self.coin_finder.get_symbol_leverage(self.symbol)
            if current_leverage < self.lev:
                self._cleanup_symbol()
                return False
    
            volume_24h = self.coin_finder.get_24h_volume(self.symbol)
            if volume_24h < 5000000 or volume_24h > 1000000000:
                self._cleanup_symbol()
                return False
    
            if not set_leverage(self.symbol, self.lev, self.api_key, self.api_secret):
                self._cleanup_symbol()
                return False
    
            balance = get_balance(self.api_key, self.api_secret)
            if balance is None or balance <= 0:
                return False
    
            current_price = self.current_price or get_current_price(self.symbol)
            if current_price <= 0:
                self._cleanup_symbol()
                return False
    
            step_size = get_step_size(self.symbol, self.api_key, self.api_secret)
            usd_amount = balance * (self.percent / 100)
            qty = (usd_amount * self.lev) / current_price
            
            if step_size > 0:
                qty = math.floor(qty / step_size) * step_size
                qty = round(qty, 8)
    
            if qty < step_size:
                return False
    
            cancel_all_orders(self.symbol, self.api_key, self.api_secret)
            time.sleep(0.5)
            
            max_retries = 3
            for attempt in range(max_retries):
                result = place_order(self.symbol, side, qty, self.api_key, self.api_secret)
                
                if result and 'orderId' in result:
                    executed_qty = float(result.get('executedQty', 0))
                    avg_price = float(result.get('avgPrice', current_price))
                    
                    if executed_qty > 0:
                        self.entry = avg_price
                        self.entry_base = avg_price
                        self.average_down_count = 0
                        self.side = side
                        self.qty = executed_qty if side == "BUY" else -executed_qty
                        self.position_open = True
                        self.status = "open"
                        self.position_open_time = time.time() 
                        
                        message = (
                            f"‚úÖ <b>ƒê√É M·ªû V·ªä TH·∫æ {self.symbol}</b>\n"
                            f"ü§ñ Chi·∫øn l∆∞·ª£c: {self.strategy_name}\n"
                            f"üìå H∆∞·ªõng: {side}\n"
                            f"üè∑Ô∏è Gi√° v√†o: {self.entry:.4f}\n"
                            f"üìä Kh·ªëi l∆∞·ª£ng: {executed_qty:.4f}\n"
                            f"üíµ Gi√° tr·ªã: {executed_qty * self.entry:.2f} USDT\n"
                            f"üí∞ ƒê√≤n b·∫©y: {self.lev}x\n"
                            f"üéØ TP: {self.tp}% | üõ°Ô∏è SL: {'T·∫Øt' if self.sl == 0 else f'{self.sl}%'}"
                        )
                        self.log(message)
                        return True
                    else:
                        time.sleep(1)
                else:
                    time.sleep(1)
            
            self._cleanup_symbol()
            return False
                    
        except Exception as e:
            self._cleanup_symbol()
            return False
    
    def _cleanup_symbol(self):
        if self.symbol:
            try:
                self.ws_manager.remove_symbol(self.symbol)
                self.coin_manager.unregister_coin(self.symbol)
            except Exception:
                pass
            
            self.symbol = None
        self.status = "searching"
        self.position_open = False
        self.side = ""
        self.qty = 0
        self.entry = 0
        
    def close_position(self, reason=""):
        try:
            current_time = time.time()
            if self._close_attempted and current_time - self._last_close_attempt < 30:
                return False
            
            self._close_attempted = True
            self._last_close_attempt = current_time

            # L·∫•y v·ªã th·∫ø TH·ª∞C T·∫æ t·ª´ Binance
            positions = get_positions(self.symbol, self.api_key, self.api_secret)
            actual_position_amt = 0
            
            for pos in positions:
                if pos['symbol'] == self.symbol:
                    actual_position_amt = float(pos.get('positionAmt', 0))
                    break
            
            # N·∫øu kh√¥ng c√≥ v·ªã th·∫ø th·ª±c t·∫ø, v·∫´n reset
            if actual_position_amt == 0:
                self._force_reset()
                self.log(f"üîÑ Reset tr·∫°ng th√°i (kh√¥ng c√≥ v·ªã th·∫ø th·ª±c t·∫ø): {reason}")
                return True
                
            close_side = "SELL" if actual_position_amt > 0 else "BUY"
            close_qty = abs(actual_position_amt)
            
            cancel_all_orders(self.symbol, self.api_key, self.api_secret)
            time.sleep(0.5)
            
            result = place_order(self.symbol, close_side, close_qty, self.api_key, self.api_secret)
            
            if result and 'orderId' in result:
                # L·∫•y PnL th·ª±c t·∫ø cu·ªëi c√πng
                unrealized_pnl, roi = self.get_actual_pnl()
                current_price = self.current_price or get_current_price(self.symbol)
                
                message = (
                    f"‚õî <b>ƒê√É ƒê√ìNG V·ªä TH·∫æ {self.symbol}</b>\n"
                    f"ü§ñ Chi·∫øn l∆∞·ª£c: {self.strategy_name}\n"
                    f"üìå L√Ω do: {reason}\n"
                    f"üè∑Ô∏è Gi√° ra: {current_price:.4f}\n"
                    f"üìä Kh·ªëi l∆∞·ª£ng: {close_qty:.4f}\n"
                    f"üí∞ PnL th·ª±c t·∫ø: {unrealized_pnl:.2f} USDT (ROI: {roi:.2f}%)"
                )
                self.log(message)
                
                self._force_reset()
                self.last_close_time = time.time()
                
                time.sleep(2)
                self.check_position_status()
                
                return True
            else:
                self._close_attempted = False
                return False
                
        except Exception as e:
            self._close_attempted = False
            self.log(f"üí• L·ªói khi ƒë√≥ng l·ªánh: {str(e)}")
            return False

    def check_tp_sl(self):
        if self._close_attempted:
            return
        
        try:
            # L·∫•y v·ªã th·∫ø TH·ª∞C T·∫æ t·ª´ Binance
            positions = get_positions(self.symbol, self.api_key, self.api_secret)
            if not positions:
                return
                
            current_position = None
            for pos in positions:
                if pos['symbol'] == self.symbol:
                    position_amt = float(pos.get('positionAmt', 0))
                    if abs(position_amt) > 0:
                        current_position = pos
                        break
            
            if not current_position:
                return
                
            # L·∫•y d·ªØ li·ªáu TH·ª∞C T·∫æ t·ª´ Binance
            position_amt = float(current_position.get('positionAmt', 0))
            entry_price = float(current_position.get('entryPrice', 0))
            leverage = float(current_position.get('leverage', 1))
            
            if position_amt == 0 or entry_price <= 0:
                return
            
            # S·ª≠ d·ª•ng gi√° hi·ªán t·∫°i t·ª´ WebSocket
            current_price = self.current_price
            if current_price <= 0:
                current_price = get_current_price(self.symbol)
            if current_price <= 0:
                return
            
            # T√≠nh to√°n PnL TH·ª∞C T·∫æ
            if position_amt > 0:  # LONG position
                price_diff = current_price - entry_price
            else:  # SHORT position  
                price_diff = entry_price - current_price
                
            # T√≠nh ROI d·ª±a tr√™n v·ªën th·ª±c t·∫ø
            position_size = abs(position_amt) * entry_price
            invested = position_size / leverage
            unrealized_pnl = price_diff * abs(position_amt)
            
            if invested <= 0:
                return
                
            roi = (unrealized_pnl / invested) * 100

            # Log theo d√µi
            if abs(roi) > max(self.tp, self.sl if self.sl > 0 else 0) * 0.7:
                self.log(f"üìä Theo d√µi PnL: ROI={roi:.2f}%, Gi√° v√†o={entry_price:.4f}, Gi√° hi·ªán t·∫°i={current_price:.4f}")

            # Ki·ªÉm tra TP/SL
            if self.tp is not None and roi >= self.tp:
                self.log(f"üéØ ƒê·∫†T TP: {roi:.2f}% >= {self.tp}%")
                self.close_position(f"‚úÖ ƒê·∫°t TP {self.tp}% (ROI th·ª±c t·∫ø: {roi:.2f}%)")
            elif self.sl is not None and self.sl > 0 and roi <= -self.sl:
                self.log(f"üõë ƒê·∫†T SL: {roi:.2f}% <= -{self.sl}%")
                self.close_position(f"‚ùå ƒê·∫°t SL {self.sl}% (ROI th·ª±c t·∫ø: {roi:.2f}%)")
                
        except Exception as e:
            self.log(f"üí• L·ªói check_tp_sl th·ª±c t·∫ø: {str(e)}")

# ========== BOT VOLUME & MACD ==========
class VolumeMACDBot(BaseBot):
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret, 
                 telegram_bot_token, telegram_chat_id, config_key=None, bot_id=None):
        
        super().__init__(symbol, lev, percent, tp, sl, ws_manager, api_key, api_secret,
                        telegram_bot_token, telegram_chat_id, "Volume MACD System", 
                        config_key, bot_id)
        
        self.analyzer = VolumeMACDStrategy()
        self.last_analysis_time = 0
        self.analysis_interval = 10  # Gi·∫£m t·ª´ 60s xu·ªëng 10s
        
    def get_signal(self):
        if not self.symbol:
            self.log("‚ùå Kh√¥ng c√≥ symbol ƒë·ªÉ ph√¢n t√≠ch")
            return None
            
        try:
            current_time = time.time()
            if current_time - self.last_analysis_time < self.analysis_interval:
                return None
            
            self.last_analysis_time = current_time
            
            self.log(f"üîç ƒêang ph√¢n t√≠ch t√≠n hi·ªáu cho {self.symbol}")
            signal = self.analyzer.analyze_volume_macd(self.symbol)
            
            # TH√äM LOG CHI TI·∫æT
            if signal == "NEUTRAL":
                self.log(f"‚ö™ Kh√¥ng c√≥ t√≠n hi·ªáu r√µ r√†ng t·ª´ Volume MACD")
            else:
                self.log(f"üéØ PH√ÅT HI·ªÜN T√çN HI·ªÜU: {signal} cho {self.symbol}")
                
            return signal
            
        except Exception as e:
            self.log(f"üí• L·ªói ph√¢n t√≠ch t√≠n hi·ªáu: {str(e)}")
            return None

# trading_bot_volume_fixed_part2.py - PH·∫¶N 2: BOT MANAGER & SYSTEM LAUNCHER
# ========== BOT MANAGER HO√ÄN CH·ªàNH ==========
class BotManager:
    def __init__(self, api_key=None, api_secret=None, telegram_bot_token=None, telegram_chat_id=None):
        self.ws_manager = WebSocketManager()
        self.bots = {}
        self.running = True
        self.start_time = time.time()
        self.user_states = {}
        
        self.api_key = api_key
        self.api_secret = api_secret
        self.telegram_bot_token = telegram_bot_token
        self.telegram_chat_id = telegram_chat_id
        
        if api_key and api_secret:
            self._verify_api_connection()
            
            self.telegram_thread = threading.Thread(target=self._telegram_listener, daemon=True)
            self.telegram_thread.start()
            
            if self.telegram_chat_id:
                self.send_main_menu(self.telegram_chat_id)

    def _verify_api_connection(self):
        balance = get_balance(self.api_key, self.api_secret)
        if balance is None:
            self.log("‚ùå L·ªñI K·∫æT N·ªêI BINANCE - Ki·ªÉm tra API Key!")

    def get_position_summary(self):
        try:
            all_positions = get_positions(api_key=self.api_key, api_secret=self.api_secret)
            
            binance_buy_count = 0
            binance_sell_count = 0
            binance_positions = []
            
            for pos in all_positions:
                position_amt = float(pos.get('positionAmt', 0))
                if position_amt != 0:
                    symbol = pos.get('symbol', 'UNKNOWN')
                    entry_price = float(pos.get('entryPrice', 0))
                    leverage = float(pos.get('leverage', 1))
                    position_value = abs(position_amt) * entry_price / leverage
                    
                    if position_amt > 0:
                        binance_buy_count += 1
                        binance_positions.append({
                            'symbol': symbol,
                            'side': 'LONG',
                            'leverage': leverage,
                            'size': abs(position_amt),
                            'entry': entry_price,
                            'value': position_value
                        })
                    else:
                        binance_sell_count += 1
                        binance_positions.append({
                            'symbol': symbol, 
                            'side': 'SHORT',
                            'leverage': leverage,
                            'size': abs(position_amt),
                            'entry': entry_price,
                            'value': position_value
                        })
        
            bot_details = []
            searching_bots = 0
            waiting_bots = 0
            trading_bots = 0
            
            for bot_id, bot in self.bots.items():
                bot_info = {
                    'bot_id': bot_id,
                    'symbol': bot.symbol or 'ƒêang t√¨m...',
                    'status': bot.status,
                    'side': bot.side,
                    'leverage': bot.lev,
                    'percent': bot.percent,
                    'tp': bot.tp,
                    'sl': bot.sl
                }
                bot_details.append(bot_info)
                
                if bot.status == "searching":
                    searching_bots += 1
                elif bot.status == "waiting":
                    waiting_bots += 1
                elif bot.status == "open":
                    trading_bots += 1
            
            summary = "üìä **TH·ªêNG K√ä CHI TI·∫æT H·ªÜ TH·ªêNG**\n\n"
            
            balance = get_balance(self.api_key, self.api_secret)
            summary += f"üí∞ **S·ªê D∆Ø**: {balance:.2f} USDT\n\n"
            
            summary += f"ü§ñ **BOT H·ªÜ TH·ªêNG**: {len(self.bots)} bots\n"
            summary += f"   üîç ƒêang t√¨m coin: {searching_bots}\n"
            summary += f"   üü° ƒêang ch·ªù: {waiting_bots}\n" 
            summary += f"   üìà ƒêang trade: {trading_bots}\n\n"
            
            if bot_details:
                summary += "üìã **CHI TI·∫æT T·ª™NG BOT**:\n"
                for bot in bot_details[:8]:
                    symbol_info = bot['symbol'] if bot['symbol'] != 'ƒêang t√¨m...' else 'üîç ƒêang t√¨m'
                    status_map = {
                        "searching": "üîç T√¨m coin",
                        "waiting": "üü° Ch·ªù t√≠n hi·ªáu", 
                        "open": "üü¢ ƒêang trade"
                    }
                    status = status_map.get(bot['status'], bot['status'])
                    
                    summary += f"   üîπ {bot['bot_id'][:15]}...\n"
                    summary += f"      üìä {symbol_info} | {status}\n"
                    summary += f"      üí∞ ƒêB: {bot['leverage']}x | V·ªën: {bot['percent']}%\n"
                    if bot['tp'] is not None and bot['sl'] is not None:
                        summary += f"      üéØ TP: {bot['tp']}% | üõ°Ô∏è SL: {bot['sl']}%\n"
                    summary += "\n"
                
                if len(bot_details) > 8:
                    summary += f"   ... v√† {len(bot_details) - 8} bot kh√°c\n\n"
            
            total_binance = binance_buy_count + binance_sell_count
            if total_binance > 0:
                summary += f"üí∞ **T·∫§T C·∫¢ V·ªä TH·∫æ BINANCE**: {total_binance} v·ªã th·∫ø\n"
                summary += f"   üü¢ LONG: {binance_buy_count}\n"
                summary += f"   üî¥ SHORT: {binance_sell_count}\n\n"
                
                summary += "üìà **CHI TI·∫æT V·ªä TH·∫æ**:\n"
                for pos in binance_positions[:5]:
                    summary += f"   üîπ {pos['symbol']} | {pos['side']}\n"
                    summary += f"      üìä KL: {pos['size']:.4f} | Gi√°: {pos['entry']:.4f}\n"
                    summary += f"      üí∞ ƒêB: {pos['leverage']}x | GT: ${pos['value']:.0f}\n\n"
                
                if len(binance_positions) > 5:
                    summary += f"   ... v√† {len(binance_positions) - 5} v·ªã th·∫ø kh√°c\n"
                    
                if binance_buy_count > binance_sell_count:
                    summary += f"\n‚öñÔ∏è **ƒê·ªÄ XU·∫§T**: Nhi·ªÅu LONG h∆°n ‚Üí ∆ØU TI√äN T√åM SHORT"
                elif binance_sell_count > binance_buy_count:
                    summary += f"\n‚öñÔ∏è **ƒê·ªÄ XU·∫§T**: Nhi·ªÅu SHORT h∆°n ‚Üí ∆ØU TI√äN T√åM LONG"
                else:
                    summary += f"\n‚öñÔ∏è **TR·∫†NG TH√ÅI**: C√¢n b·∫±ng t·ªët"
                        
            else:
                summary += f"üí∞ **T·∫§T C·∫¢ V·ªä TH·∫æ BINANCE**: Kh√¥ng c√≥ v·ªã th·∫ø n√†o\n"
                    
            return summary
                    
        except Exception as e:
            return f"‚ùå L·ªói th·ªëng k√™: {str(e)}"

    def log(self, message):
        if self.telegram_bot_token and self.telegram_chat_id:
            send_telegram(f"<b>SYSTEM</b>: {message}", 
                         bot_token=self.telegram_bot_token, 
                         default_chat_id=self.telegram_chat_id)

    def send_main_menu(self, chat_id):
        welcome = "ü§ñ <b>BOT GIAO D·ªäCH FUTURES ƒêA LU·ªíNG</b>\n\nüéØ <b>H·ªÜ TH·ªêNG VOLUME, MACD, RSI & EMA</b>"
        send_telegram(welcome, chat_id, create_main_menu(),
                     bot_token=self.telegram_bot_token, 
                     default_chat_id=self.telegram_chat_id)

    def add_bot(self, symbol, lev, percent, tp, sl, strategy_type, bot_count=1, **kwargs):
        if sl == 0:
            sl = None
            
        if not self.api_key or not self.api_secret:
            return False
        
        test_balance = get_balance(self.api_key, self.api_secret)
        if test_balance is None:
            return False
        
        bot_mode = kwargs.get('bot_mode', 'static')
        created_count = 0
        
        for i in range(bot_count):
            try:
                if bot_mode == 'static' and symbol:
                    bot_id = f"{symbol}_{strategy_type}_{i}_{int(time.time())}"
                    
                    if bot_id in self.bots:
                        continue
                    
                    bot_class = VolumeMACDBot
                    
                    if not bot_class:
                        continue
                    
                    bot = bot_class(symbol, lev, percent, tp, sl, self.ws_manager,
                                  self.api_key, self.api_secret, self.telegram_bot_token, 
                                  self.telegram_chat_id, bot_id=bot_id)
                    
                else:
                    bot_id = f"DYNAMIC_{strategy_type}_{i}_{int(time.time())}"
                    
                    if bot_id in self.bots:
                        continue
                    
                    bot_class = VolumeMACDBot
                    
                    if not bot_class:
                        continue
                    
                    bot = bot_class(None, lev, percent, tp, sl, self.ws_manager,
                                  self.api_key, self.api_secret, self.telegram_bot_token,
                                  self.telegram_chat_id, bot_id=bot_id)
                
                bot._bot_manager = self
                self.bots[bot_id] = bot
                created_count += 1
                
            except Exception as e:
                continue
        
        if created_count > 0:
            success_msg = (
                f"‚úÖ <b>ƒê√É T·∫†O {created_count}/{bot_count} BOT VOLUME & MACD</b>\n\n"
                f"üéØ H·ªá th·ªëng: Volume, MACD, RSI & EMA\n"
                f"üí∞ ƒê√≤n b·∫©y: {lev}x\n"
                f"üìà % S·ªë d∆∞: {percent}%\n"
                f"üéØ TP: {tp}%\n"
                f"üõ°Ô∏è SL: {sl if sl is not None else 'T·∫Øt'}%\n"
                f"üîß Ch·∫ø ƒë·ªô: {bot_mode}\n"
            )
            
            if bot_mode == 'static' and symbol:
                success_msg += f"üîó Coin: {symbol}\n"
            else:
                success_msg += f"üîó Coin: T·ª± ƒë·ªông t√¨m ki·∫øm\n"
            
            success_msg += f"\nüéØ <b>M·ªói bot l√† 1 v√≤ng l·∫∑p ƒë·ªôc l·∫≠p</b>"
            
            self.log(success_msg)
            return True
        else:
            return False

    def stop_bot(self, bot_id):
        bot = self.bots.get(bot_id)
        if bot:
            bot.stop()
            del self.bots[bot_id]
            return True
        return False

    def stop_all(self):
        for bot_id in list(self.bots.keys()):
            self.stop_bot(bot_id)
        self.ws_manager.stop()
        self.running = False

    def _telegram_listener(self):
        last_update_id = 0
        
        while self.running and self.telegram_bot_token:
            try:
                url = f"https://api.telegram.org/bot{self.telegram_bot_token}/getUpdates?offset={last_update_id+1}&timeout=30"
                response = requests.get(url, timeout=35)
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('ok'):
                        for update in data['result']:
                            update_id = update['update_id']
                            message = update.get('message', {})
                            chat_id = str(message.get('chat', {}).get('id'))
                            text = message.get('text', '').strip()
                            
                            if chat_id != self.telegram_chat_id:
                                continue
                            
                            if update_id > last_update_id:
                                last_update_id = update_id
                            
                            self._handle_telegram_message(chat_id, text)
                elif response.status_code == 409:
                    time.sleep(60)
                else:
                    time.sleep(10)
                
            except Exception as e:
                time.sleep(10)

    def _handle_telegram_message(self, chat_id, text):
        user_state = self.user_states.get(chat_id, {})
        current_step = user_state.get('step')
        
        if current_step == 'waiting_bot_count':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    bot_count = int(text)
                    if bot_count <= 0 or bot_count > 10:
                        send_telegram("‚ö†Ô∏è S·ªë l∆∞·ª£ng bot ph·∫£i t·ª´ 1 ƒë·∫øn 10. Vui l√≤ng ch·ªçn l·∫°i:",
                                    chat_id, create_bot_count_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    user_state['bot_count'] = bot_count
                    user_state['step'] = 'waiting_bot_mode'
                    
                    send_telegram(
                        f"ü§ñ S·ªë l∆∞·ª£ng bot: {bot_count}\n\n"
                        f"Ch·ªçn ch·∫ø ƒë·ªô bot:",
                        chat_id,
                        create_bot_mode_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá cho s·ªë l∆∞·ª£ng bot:",
                                chat_id, create_bot_count_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_bot_mode':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            elif text in ["ü§ñ Bot Tƒ©nh - Coin c·ª• th·ªÉ", "üîÑ Bot ƒê·ªông - T·ª± t√¨m coin"]:
                if text == "ü§ñ Bot Tƒ©nh - Coin c·ª• th·ªÉ":
                    user_state['bot_mode'] = 'static'
                    user_state['step'] = 'waiting_strategy'
                    send_telegram(
                        "üéØ <b>ƒê√É CH·ªåN: BOT Tƒ®NH</b>\n\n"
                        "ü§ñ Bot s·∫Ω giao d·ªãch coin C·ªê ƒê·ªäNH\n"
                        "üìä B·∫°n c·∫ßn ch·ªçn coin c·ª• th·ªÉ\n\n"
                        "Ch·ªçn chi·∫øn l∆∞·ª£c:",
                        chat_id,
                        create_strategy_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                else:
                    user_state['bot_mode'] = 'dynamic'
                    user_state['step'] = 'waiting_strategy'
                    send_telegram(
                        "üéØ <b>ƒê√É CH·ªåN: BOT ƒê·ªòNG</b>\n\n"
                        f"ü§ñ H·ªá th·ªëng s·∫Ω t·∫°o <b>{user_state.get('bot_count', 1)} bot ƒë·ªôc l·∫≠p</b>\n"
                        f"üîÑ M·ªói bot t·ª± t√¨m coin & trade ƒë·ªôc l·∫≠p\n"
                        f"üéØ T·ª± reset ho√†n to√†n sau m·ªói l·ªánh\n"
                        f"üìä M·ªói bot l√† 1 v√≤ng l·∫∑p ho√†n ch·ªânh\n\n"
                        "Ch·ªçn chi·∫øn l∆∞·ª£c:",
                        chat_id,
                        create_strategy_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )

        elif current_step == 'waiting_strategy':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            elif text in ["üìä Volume & MACD System"]:
                
                strategy_map = {
                    "üìä Volume & MACD System": "Volume-MACD"
                }
                
                strategy = strategy_map[text]
                user_state['strategy'] = strategy
                user_state['step'] = 'waiting_exit_strategy'
                
                strategy_descriptions = {
                    "Volume-MACD": "Ph√¢n t√≠ch Volume, MACD, RSI & EMA tr√™n 3 khung th·ªùi gian"
                }
                
                description = strategy_descriptions.get(strategy, "")
                bot_count = user_state.get('bot_count', 1)
                
                send_telegram(
                    f"üéØ <b>ƒê√É CH·ªåN: {strategy}</b>\n"
                    f"ü§ñ S·ªë l∆∞·ª£ng: {bot_count} bot ƒë·ªôc l·∫≠p\n\n"
                    f"{description}\n\n"
                    f"Ch·ªçn chi·∫øn l∆∞·ª£c tho√°t l·ªánh:",
                    chat_id,
                    create_exit_strategy_keyboard(),
                    self.telegram_bot_token, self.telegram_chat_id
                )

        elif current_step == 'waiting_exit_strategy':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            elif text == "üéØ Ch·ªâ TP/SL c·ªë ƒë·ªãnh":
                user_state['exit_strategy'] = 'traditional'
                self._continue_bot_creation(chat_id, user_state)

        elif current_step == 'waiting_symbol':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                user_state['symbol'] = text
                user_state['step'] = 'waiting_leverage'
                send_telegram(
                    f"üîó Coin: {text}\n\n"
                    f"Ch·ªçn ƒë√≤n b·∫©y:",
                    chat_id,
                    create_leverage_keyboard(),
                    self.telegram_bot_token, self.telegram_chat_id
                )

        elif current_step == 'waiting_leverage':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                if text.endswith('x'):
                    lev_text = text[:-1]
                else:
                    lev_text = text

                try:
                    leverage = int(lev_text)
                    if leverage <= 0 or leverage > 100:
                        send_telegram("‚ö†Ô∏è ƒê√≤n b·∫©y ph·∫£i t·ª´ 1 ƒë·∫øn 100. Vui l√≤ng ch·ªçn l·∫°i:",
                                    chat_id, create_leverage_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    warning_msg = ""
                    if leverage > 50:
                        warning_msg = f"\n\n‚ö†Ô∏è <b>C·∫¢NH B√ÅO R·ª¶I RO CAO</b>\nƒê√≤n b·∫©y {leverage}x r·∫•t nguy hi·ªÉm!"
                    elif leverage > 20:
                        warning_msg = f"\n\n‚ö†Ô∏è <b>C·∫¢NH B√ÅO R·ª¶I RO</b>\nƒê√≤n b·∫©y {leverage}x c√≥ r·ªßi ro cao!"

                    user_state['leverage'] = leverage
                    user_state['step'] = 'waiting_percent'
                    
                    balance = get_balance(self.api_key, self.api_secret)
                    balance_info = f"\nüí∞ S·ªë d∆∞ hi·ªán c√≥: {balance:.2f} USDT" if balance else ""
                    
                    send_telegram(
                        f"üí∞ ƒê√≤n b·∫©y: {leverage}x{balance_info}{warning_msg}\n\n"
                        f"Ch·ªçn % s·ªë d∆∞ cho m·ªói l·ªánh:",
                        chat_id,
                        create_percent_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá cho ƒë√≤n b·∫©y:",
                                chat_id, create_leverage_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_percent':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    percent = float(text)
                    if percent <= 0 or percent > 100:
                        send_telegram("‚ö†Ô∏è % s·ªë d∆∞ ph·∫£i t·ª´ 0.1 ƒë·∫øn 100. Vui l√≤ng ch·ªçn l·∫°i:",
                                    chat_id, create_percent_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    user_state['percent'] = percent
                    user_state['step'] = 'waiting_tp'
                    
                    balance = get_balance(self.api_key, self.api_secret)
                    actual_amount = balance * (percent / 100) if balance else 0
                    
                    send_telegram(
                        f"üìä % S·ªë d∆∞: {percent}%\n"
                        f"üíµ S·ªë ti·ªÅn m·ªói l·ªánh: ~{actual_amount:.2f} USDT\n\n"
                        f"Ch·ªçn Take Profit (%):",
                        chat_id,
                        create_tp_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá cho % s·ªë d∆∞:",
                                chat_id, create_percent_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_tp':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    tp = float(text)
                    if tp <= 0:
                        send_telegram("‚ö†Ô∏è Take Profit ph·∫£i l·ªõn h∆°n 0. Vui l√≤ng ch·ªçn l·∫°i:",
                                    chat_id, create_tp_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    user_state['tp'] = tp
                    user_state['step'] = 'waiting_sl'
                    
                    send_telegram(
                        f"üéØ Take Profit: {tp}%\n\n"
                        f"Ch·ªçn Stop Loss (%):",
                        chat_id,
                        create_sl_keyboard(),
                        self.telegram_bot_token, self.telegram_chat_id
                    )
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá cho Take Profit:",
                                chat_id, create_tp_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif current_step == 'waiting_sl':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                try:
                    sl = float(text)
                    if sl < 0:
                        send_telegram("‚ö†Ô∏è Stop Loss ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 0. Vui l√≤ng ch·ªçn l·∫°i:",
                                    chat_id, create_sl_keyboard(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                        return

                    user_state['sl'] = sl
                    
                    strategy = user_state.get('strategy')
                    bot_mode = user_state.get('bot_mode', 'static')
                    leverage = user_state.get('leverage')
                    percent = user_state.get('percent')
                    tp = user_state.get('tp')
                    sl = user_state.get('sl')
                    symbol = user_state.get('symbol')
                    bot_count = user_state.get('bot_count', 1)
                    
                    success = self.add_bot(
                        symbol=symbol,
                        lev=leverage,
                        percent=percent,
                        tp=tp,
                        sl=sl,
                        strategy_type=strategy,
                        bot_mode=bot_mode,
                        bot_count=bot_count
                    )
                    
                    if success:
                        success_msg = (
                            f"‚úÖ <b>ƒê√É T·∫†O {bot_count} BOT TH√ÄNH C√îNG</b>\n\n"
                            f"ü§ñ Chi·∫øn l∆∞·ª£c: {strategy}\n"
                            f"üîß Ch·∫ø ƒë·ªô: {bot_mode}\n"
                            f"üî¢ S·ªë l∆∞·ª£ng: {bot_count} bot ƒë·ªôc l·∫≠p\n"
                            f"üí∞ ƒê√≤n b·∫©y: {leverage}x\n"
                            f"üìä % S·ªë d∆∞: {percent}%\n"
                            f"üéØ TP: {tp}%\n"
                            f"üõ°Ô∏è SL: {sl}%"
                        )
                        if bot_mode == 'static' and symbol:
                            success_msg += f"\nüîó Coin: {symbol}"
                        
                        success_msg += f"\n\nüéØ <b>M·ªói bot l√† 1 v√≤ng l·∫∑p ƒë·ªôc l·∫≠p</b>\n"
                        success_msg += f"üîÑ <b>T·ª± reset ho√†n to√†n sau m·ªói l·ªánh</b>\n"
                        success_msg += f"üìä <b>T·ª± t√¨m coin & trade ƒë·ªôc l·∫≠p</b>"
                        
                        send_telegram(success_msg, chat_id, create_main_menu(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                    else:
                        send_telegram("‚ùå C√≥ l·ªói khi t·∫°o bot. Vui l√≤ng th·ª≠ l·∫°i.",
                                    chat_id, create_main_menu(),
                                    self.telegram_bot_token, self.telegram_chat_id)
                    
                    self.user_states[chat_id] = {}
                    
                except ValueError:
                    send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá cho Stop Loss:",
                                chat_id, create_sl_keyboard(),
                                self.telegram_bot_token, self.telegram_chat_id)

        elif text == "‚ûï Th√™m Bot":
            self.user_states[chat_id] = {'step': 'waiting_bot_count'}
            balance = get_balance(self.api_key, self.api_secret)
            if balance is None:
                send_telegram("‚ùå <b>L·ªñI K·∫æT N·ªêI BINANCE</b>\nVui l√≤ng ki·ªÉm tra API Key!", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
                return
            
            send_telegram(
                f"üéØ <b>CH·ªåN S·ªê L∆Ø·ª¢NG BOT ƒê·ªòC L·∫¨P</b>\n\n"
                f"üí∞ S·ªë d∆∞ hi·ªán c√≥: <b>{balance:.2f} USDT</b>\n\n"
                f"Ch·ªçn s·ªë l∆∞·ª£ng bot ƒë·ªôc l·∫≠p b·∫°n mu·ªën t·∫°o:\n"
                f"<i>M·ªói bot s·∫Ω t·ª± t√¨m coin & trade ƒë·ªôc l·∫≠p</i>",
                chat_id,
                create_bot_count_keyboard(),
                self.telegram_bot_token, self.telegram_chat_id
            )
        
        elif text == "üìä Danh s√°ch Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            else:
                message = "ü§ñ <b>DANH S√ÅCH BOT ƒê·ªòC L·∫¨P ƒêANG CH·∫†Y</b>\n\n"
                
                active_bots = 0
                searching_bots = 0
                trading_bots = 0
                
                for bot_id, bot in self.bots.items():
                    if bot.status == "searching":
                        status = "üîç ƒêang t√¨m coin"
                        searching_bots += 1
                    elif bot.status == "waiting":
                        status = "üü° Ch·ªù t√≠n hi·ªáu"
                        trading_bots += 1
                    elif bot.status == "open":
                        status = "üü¢ ƒêang trade"
                        trading_bots += 1
                    else:
                        status = "‚ö™ Unknown"
                    
                    symbol_info = bot.symbol if bot.symbol else "ƒêang t√¨m..."
                    message += f"üîπ {bot_id}\n"
                    message += f"   üìä {symbol_info} | {status}\n"
                    message += f"   üí∞ ƒêB: {bot.lev}x | V·ªën: {bot.percent}%\n\n"
                
                message += f"üìà T·ªïng s·ªë: {len(self.bots)} bot\n"
                message += f"üîç ƒêang t√¨m coin: {searching_bots} bot\n"
                message += f"üìä ƒêang trade: {trading_bots} bot"
                
                send_telegram(message, chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "üìä Th·ªëng k√™":
            summary = self.get_position_summary()
            send_telegram(summary, chat_id,
                         bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        elif text == "‚õî D·ª´ng Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            else:
                message = "‚õî <b>CH·ªåN BOT ƒê·ªÇ D·ª™NG</b>\n\n"
                keyboard = []
                row = []
                
                for i, bot_id in enumerate(self.bots.keys()):
                    bot = self.bots[bot_id]
                    symbol_info = bot.symbol if bot.symbol else "No Coin"
                    message += f"üîπ {bot_id} - {symbol_info}\n"
                    row.append({"text": f"‚õî {bot_id}"})
                    if len(row) == 1 or i == len(self.bots) - 1:
                        keyboard.append(row)
                        row = []
                
                keyboard.append([{"text": "‚õî D·ª™NG T·∫§T C·∫¢"}])
                keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
                
                send_telegram(
                    message, 
                    chat_id, 
                    {"keyboard": keyboard, "resize_keyboard": True, "one_time_keyboard": True},
                    self.telegram_bot_token, self.telegram_chat_id
                )
        
        elif text.startswith("‚õî "):
            bot_id = text.replace("‚õî ", "").strip()
            if bot_id == "D·ª™NG T·∫§T C·∫¢":
                self.stop_all()
                send_telegram("‚õî ƒê√£ d·ª´ng t·∫•t c·∫£ bot", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            elif self.stop_bot(bot_id):
                send_telegram(f"‚õî ƒê√£ d·ª´ng bot {bot_id}", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
            else:
                send_telegram(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y bot {bot_id}", chat_id, create_main_menu(),
                            self.telegram_bot_token, self.telegram_chat_id)
        
        elif text == "üí∞ S·ªë d∆∞":
            try:
                balance = get_balance(self.api_key, self.api_secret)
                if balance is None:
                    send_telegram("‚ùå <b>L·ªñI K·∫æT N·ªêI BINANCE</b>\nVui l√≤ng ki·ªÉm tra API Key!", chat_id,
                                bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
                else:
                    send_telegram(f"üí∞ <b>S·ªê D∆Ø KH·∫¢ D·ª§NG</b>: {balance:.2f} USDT", chat_id,
                                bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            except Exception as e:
                pass
        
        elif text == "üìà V·ªã th·∫ø":
            try:
                positions = get_positions(api_key=self.api_key, api_secret=self.api_secret)
                if not positions:
                    send_telegram("üì≠ Kh√¥ng c√≥ v·ªã th·∫ø n√†o ƒëang m·ªü", chat_id,
                                bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
                    return
                
                message = "üìà <b>V·ªä TH·∫æ ƒêANG M·ªû</b>\n\n"
                for pos in positions:
                    position_amt = float(pos.get('positionAmt', 0))
                    if position_amt != 0:
                        symbol = pos.get('symbol', 'UNKNOWN')
                        entry = float(pos.get('entryPrice', 0))
                        side = "LONG" if position_amt > 0 else "SHORT"
                        pnl = float(pos.get('unRealizedProfit', 0))
                        
                        message += (
                            f"üîπ {symbol} | {side}\n"
                            f"üìä Kh·ªëi l∆∞·ª£ng: {abs(position_amt):.4f}\n"
                            f"üè∑Ô∏è Gi√° v√†o: {entry:.4f}\n"
                            f"üí∞ PnL: {pnl:.2f} USDT\n\n"
                        )
                
                send_telegram(message, chat_id,
                            bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
            except Exception as e:
                pass
        
        elif text == "üéØ Chi·∫øn l∆∞·ª£c":
            strategy_info = (
                "üéØ <b>H·ªÜ TH·ªêNG PH√ÇN T√çCH VOLUME, MACD, RSI & EMA</b>\n\n"
                
                "üìä <b>Nguy√™n t·∫Øc giao d·ªãch:</b>\n"
                "‚Ä¢ Volume tƒÉng + MACD bullish + n·∫øn xanh ‚Üí MUA\n"
                "‚Ä¢ Volume tƒÉng + MACD bearish + n·∫øn ƒë·ªè ‚Üí B√ÅN\n"  
                "‚Ä¢ Volume gi·∫£m + n·∫øn doji ‚Üí CH·ªà MUA\n"
                "‚Ä¢ RSI qu√° mua/qu√° b√°n + EMA + volume gi·∫£m ‚Üí THO√ÅT L·ªÜNH\n\n"
                
                "‚è∞ <b>Khung th·ªùi gian ph√¢n t√≠ch:</b>\n"
                "‚Ä¢ 1 ph√∫t - T√≠n hi·ªáu nhanh\n"
                "‚Ä¢ 5 ph√∫t - Trung h·∫°n\n"
                "‚Ä¢ 15 ph√∫t - Xu h∆∞·ªõng ch√≠nh\n\n"
                
                "üìà <b>Ch·ªâ b√°o k·ªπ thu·∫≠t:</b>\n"
                "‚Ä¢ MACD (12,26,9) - X√°c ƒë·ªãnh xu h∆∞·ªõng\n"
                "‚Ä¢ RSI (14) - X√°c ƒë·ªãnh qu√° mua/qu√° b√°n\n"
                "‚Ä¢ EMA (20) - X√°c ƒë·ªãnh xu h∆∞·ªõng trung h·∫°n\n"
                "‚Ä¢ Volume - X√°c ƒë·ªãnh s·ª©c m·∫°nh\n\n"
                
                "‚öñÔ∏è <b>C√¢n b·∫±ng v·ªã th·∫ø:</b>\n"
                "‚Ä¢ ƒê·∫øm t·ªïng s·ªë LONG/SHORT tr√™n Binance\n"
                "‚Ä¢ ∆Øu ti√™n h∆∞·ªõng NG∆Ø·ª¢C v·ªõi s·ªë l∆∞·ª£ng nhi·ªÅu h∆°n\n"
                "‚Ä¢ ƒê·∫£m b·∫£o ƒëa d·∫°ng h√≥a r·ªßi ro"
            )
            send_telegram(strategy_info, chat_id,
                        bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text == "‚öôÔ∏è C·∫•u h√¨nh":
            balance = get_balance(self.api_key, self.api_secret)
            api_status = "‚úÖ ƒê√£ k·∫øt n·ªëi" if balance is not None else "‚ùå L·ªói k·∫øt n·ªëi"
            
            searching_bots = sum(1 for bot in self.bots.values() if bot.status == "searching")
            trading_bots = sum(1 for bot in self.bots.values() if bot.status in ["waiting", "open"])
            
            config_info = (
                "‚öôÔ∏è <b>C·∫§U H√åNH H·ªÜ TH·ªêNG ƒêA LU·ªíNG</b>\n\n"
                f"üîë Binance API: {api_status}\n"
                f"ü§ñ T·ªïng s·ªë bot: {len(self.bots)}\n"
                f"üîç ƒêang t√¨m coin: {searching_bots} bot\n"
                f"üìä ƒêang trade: {trading_bots} bot\n"
                f"üåê WebSocket: {len(self.ws_manager.connections)} k·∫øt n·ªëi\n\n"
                f"üéØ <b>M·ªói bot ƒë·ªôc l·∫≠p - T·ª± reset ho√†n to√†n</b>"
            )
            send_telegram(config_info, chat_id,
                        bot_token=self.telegram_bot_token, default_chat_id=self.telegram_chat_id)
        
        elif text:
            self.send_main_menu(chat_id)

    def _continue_bot_creation(self, chat_id, user_state):
        strategy = user_state.get('strategy')
        bot_mode = user_state.get('bot_mode', 'static')
        bot_count = user_state.get('bot_count', 1)
        
        if bot_mode == 'static':
            user_state['step'] = 'waiting_symbol'
            send_telegram(
                f"üéØ <b>BOT Tƒ®NH: {strategy}</b>\n"
                f"ü§ñ S·ªë l∆∞·ª£ng: {bot_count} bot ƒë·ªôc l·∫≠p\n\n"
                f"ü§ñ M·ªói bot s·∫Ω trade coin C·ªê ƒê·ªäNH\n\n"
                f"Ch·ªçn c·∫∑p coin:",
                chat_id,
                create_symbols_keyboard(strategy),
                self.telegram_bot_token, self.telegram_chat_id
            )
        else:
            user_state['step'] = 'waiting_leverage'
            send_telegram(
                f"üéØ <b>BOT ƒê·ªòNG ƒêA LU·ªíNG</b>\n"
                f"ü§ñ S·ªë l∆∞·ª£ng: {bot_count} bot ƒë·ªôc l·∫≠p\n\n"
                f"ü§ñ M·ªói bot s·∫Ω t·ª± t√¨m coin & trade ƒë·ªôc l·∫≠p\n"
                f"üîÑ T·ª± reset ho√†n to√†n sau m·ªói l·ªánh\n"
                f"üìä M·ªói bot l√† 1 v√≤ng l·∫∑p ho√†n ch·ªânh\n"
                f"‚öñÔ∏è T·ª± c√¢n b·∫±ng v·ªõi c√°c bot kh√°c\n\n"
                f"Ch·ªçn ƒë√≤n b·∫©y:",
                chat_id,
                create_leverage_keyboard(strategy),
                self.telegram_bot_token, self.telegram_chat_id
            )
