# hft_bot.py
import json
import hmac
import hashlib
import time
import threading
import urllib.request
import urllib.parse
import numpy as np
import websocket
import logging
import requests
import os
import sys
import math
from datetime import datetime

# C·∫•u h√¨nh logging chi ti·∫øt
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(module)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('hft_bot.log')
    ]
)
logger = logging.getLogger('HFTBot')
logger.setLevel(logging.INFO)

# L·∫•y c·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
BINANCE_API_KEY = os.getenv('BINANCE_API_KEY', '')
BINANCE_SECRET_KEY = os.getenv('BINANCE_SECRET_KEY', '')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '')

# C·∫•u h√¨nh bot t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
bot_config_json = os.getenv('BOT_CONFIGS', '[]')
try:
    BOT_CONFIGS = json.loads(bot_config_json)
except Exception as e:
    logger.error(f"L·ªói ph√¢n t√≠ch c·∫•u h√¨nh BOT_CONFIGS: {e}")
    BOT_CONFIGS = []

# ========== H√ÄM G·ª¨I TELEGRAM V√Ä X·ª¨ L√ù L·ªñI ==========
def send_telegram(message, chat_id=None, reply_markup=None):
    """G·ª≠i th√¥ng b√°o qua Telegram v·ªõi x·ª≠ l√Ω l·ªói chi ti·∫øt"""
    if not TELEGRAM_BOT_TOKEN:
        logger.warning("C·∫•u h√¨nh Telegram Bot Token ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
        return
    
    chat_id = chat_id or TELEGRAM_CHAT_ID
    if not chat_id:
        logger.warning("C·∫•u h√¨nh Telegram Chat ID ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
        return
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup)
    
    try:
        response = requests.post(url, json=payload, timeout=15)
        if response.status_code != 200:
            error_msg = response.text
            logger.error(f"L·ªói g·ª≠i Telegram ({response.status_code}): {error_msg}")
    except Exception as e:
        logger.error(f"L·ªói k·∫øt n·ªëi Telegram: {str(e)}")

# ========== H√ÄM T·∫†O MENU TELEGRAM ==========
def create_menu_keyboard():
    """T·∫°o menu 3 n√∫t cho Telegram"""
    return {
        "keyboard": [
            [{"text": "üìä Danh s√°ch Bot"}],
            [{"text": "‚ûï Th√™m Bot"}, {"text": "‚õî D·ª´ng Bot"}],
            [{"text": "üí∞ S·ªë d∆∞ t√†i kho·∫£n"}, {"text": "üìà V·ªã th·∫ø ƒëang m·ªü"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def create_cancel_keyboard():
    """T·∫°o b√†n ph√≠m h·ªßy"""
    return {
        "keyboard": [[{"text": "‚ùå H·ªßy b·ªè"}]],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_symbols_keyboard():
    """T·∫°o b√†n ph√≠m ch·ªçn c·∫∑p coin"""
    popular_symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "SOLUSDT", "XRPUSDT", "DOGEUSDT"]
    keyboard = []
    row = []
    for symbol in popular_symbols:
        row.append({"text": symbol})
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_leverage_keyboard():
    """T·∫°o b√†n ph√≠m ch·ªçn ƒë√≤n b·∫©y"""
    leverages = ["3", "5", "10", "20", "30", "50", "75", "100"]
    keyboard = []
    row = []
    for lev in leverages:
        row.append({"text": f"{lev}x"})
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

# ========== H√ÄM H·ªñ TR·ª¢ API BINANCE ==========
def sign(query):
    try:
        return hmac.new(BINANCE_SECRET_KEY.encode(), query.encode(), hashlib.sha256).hexdigest()
    except Exception as e:
        logger.error(f"L·ªói t·∫°o ch·ªØ k√Ω: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI SIGN:</b> {str(e)}")
        return ""

def binance_api_request(url, method='GET', params=None, headers=None):
    """H√†m t·ªïng qu√°t cho c√°c y√™u c·∫ßu API Binance v·ªõi x·ª≠ l√Ω l·ªói chi ti·∫øt"""
    max_retries = 3
    for attempt in range(max_retries):
        try:
            if method.upper() == 'GET':
                if params:
                    query = urllib.parse.urlencode(params)
                    url = f"{url}?{query}"
                req = urllib.request.Request(url, headers=headers or {})
            else:
                data = urllib.parse.urlencode(params).encode() if params else None
                req = urllib.request.Request(url, data=data, headers=headers or {}, method=method)
            
            with urllib.request.urlopen(req, timeout=15) as response:
                if response.status == 200:
                    return json.loads(response.read().decode())
                else:
                    logger.error(f"L·ªói API ({response.status}): {response.read().decode()}")
                    if response.status == 429:  # Rate limit
                        time.sleep(2 ** attempt)  # Exponential backoff
                    elif response.status >= 500:
                        time.sleep(1)
                    continue
        except urllib.error.HTTPError as e:
            logger.error(f"L·ªói HTTP ({e.code}): {e.reason}")
            if e.code == 429:  # Rate limit
                time.sleep(2 ** attempt)  # Exponential backoff
            elif e.code >= 500:
                time.sleep(1)
            continue
        except Exception as e:
            logger.error(f"L·ªói k·∫øt n·ªëi API: {str(e)}")
            time.sleep(1)
    
    logger.error(f"Kh√¥ng th·ªÉ th·ª±c hi·ªán y√™u c·∫ßu API sau {max_retries} l·∫ßn th·ª≠")
    return None

def get_step_size(symbol):
    url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
    try:
        data = binance_api_request(url)
        if not data:
            return 0.001
            
        for s in data['symbols']:
            if s['symbol'] == symbol.upper():
                for f in s['filters']:
                    if f['filterType'] == 'LOT_SIZE':
                        return float(f['stepSize'])
    except Exception as e:
        logger.error(f"L·ªói l·∫•y step size: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI STEP SIZE:</b> {symbol} - {str(e)}")
    return 0.001

def set_leverage(symbol, lev):
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "leverage": lev,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query)
        url = f"https://fapi.binance.com/fapi/v1/leverage?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': BINANCE_API_KEY}
        
        response = binance_api_request(url, method='POST', headers=headers)
        if response and 'leverage' in response:
            return True
    except Exception as e:
        logger.error(f"L·ªói thi·∫øt l·∫≠p ƒë√≤n b·∫©y: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI ƒê√íN B·∫®Y:</b> {symbol} - {str(e)}")
    return False

def get_balance():
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query)
        url = f"https://fapi.binance.com/fapi/v2/account?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': BINANCE_API_KEY}
        
        data = binance_api_request(url, headers=headers)
        if not data:
            return 0
            
        for asset in data['assets']:
            if asset['asset'] == 'USDT':
                return float(asset['availableBalance'])
    except Exception as e:
        logger.error(f"L·ªói l·∫•y s·ªë d∆∞: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI S·ªê D∆Ø:</b> {str(e)}")
    return 0

def place_order(symbol, side, qty):
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "side": side,
            "type": "MARKET",
            "quantity": qty,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query)
        url = f"https://fapi.binance.com/fapi/v1/order?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': BINANCE_API_KEY}
        
        return binance_api_request(url, method='POST', headers=headers)
    except Exception as e:
        logger.error(f"L·ªói ƒë·∫∑t l·ªánh: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI ƒê·∫∂T L·ªÜNH:</b> {symbol} - {str(e)}")
    return None

def cancel_all_orders(symbol):
    try:
        ts = int(time.time() * 1000)
        params = {"symbol": symbol.upper(), "timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query)
        url = f"https://fapi.binance.com/fapi/v1/allOpenOrders?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': BINANCE_API_KEY}
        
        binance_api_request(url, method='DELETE', headers=headers)
        return True
    except Exception as e:
        logger.error(f"L·ªói h·ªßy l·ªánh: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI H·ª¶Y L·ªÜNH:</b> {symbol} - {str(e)}")
    return False

def get_current_price(symbol):
    try:
        url = f"https://fapi.binance.com/fapi/v1/ticker/price?symbol={symbol.upper()}"
        data = binance_api_request(url)
        if data and 'price' in data:
            return float(data['price'])
    except Exception as e:
        logger.error(f"L·ªói l·∫•y gi√°: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI GI√Å:</b> {symbol} - {str(e)}")
    return 0

def get_positions(symbol=None):
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        if symbol:
            params["symbol"] = symbol.upper()
            
        query = urllib.parse.urlencode(params)
        sig = sign(query)
        url = f"https://fapi.binance.com/fapi/v2/positionRisk?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': BINANCE_API_KEY}
        
        positions = binance_api_request(url, headers=headers)
        if not positions:
            return []
            
        if symbol:
            for pos in positions:
                if pos['symbol'] == symbol.upper():
                    return [pos]
            
        return positions
    except Exception as e:
        logger.error(f"L·ªói l·∫•y v·ªã th·∫ø: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI V·ªä TH·∫æ:</b> {symbol if symbol else ''} - {str(e)}")
    return []

# ========== QU·∫¢N L√ù D·ªÆ LI·ªÜU T·ªêC ƒê·ªò CAO ==========
class DataManager:
    def __init__(self):
        self.price_data = {}
        self.orderbook_data = {}
        self.lock = threading.Lock()
        
    def update_price(self, symbol, price, timestamp=None):
        with self.lock:
            if symbol not in self.price_data:
                self.price_data[symbol] = []
            self.price_data[symbol].append(price)
            if len(self.price_data[symbol]) > 100:
                self.price_data[symbol] = self.price_data[symbol][-100:]
    
    def get_last_price(self, symbol):
        with self.lock:
            if symbol in self.price_data and self.price_data[symbol]:
                return self.price_data[symbol][-1]
        return 0

    def get_prices(self, symbol, count=10):
        with self.lock:
            if symbol in self.price_data:
                return self.price_data[symbol][-count:]
        return []

    def update_orderbook(self, symbol, bid, ask, bid_qty, ask_qty):
        with self.lock:
            self.orderbook_data[symbol] = {
                'bid': bid,
                'ask': ask,
                'bid_qty': bid_qty,
                'ask_qty': ask_qty,
                'timestamp': time.time()
            }

    def get_orderbook(self, symbol):
        with self.lock:
            return self.orderbook_data.get(symbol, {
                'bid': 0, 'ask': 0, 'bid_qty': 0, 'ask_qty': 0
            })

# ========== QU·∫¢N L√ù WEBSOCKET ==========
class WebSocketManager:
    def __init__(self, data_manager):
        self.data_manager = data_manager
        self.connections = {}
        self._stop_event = threading.Event()
        
    def add_symbol(self, symbol, callback=None):
        symbol = symbol.upper()
        if symbol not in self.connections:
            self._create_connection(symbol, callback)
                
    def _create_connection(self, symbol, callback):
        if self._stop_event.is_set():
            return
            
        # T·∫°o stream gi√°
        trade_stream = f"{symbol.lower()}@trade"
        trade_url = f"wss://fstream.binance.com/ws/{trade_stream}"
        
        # T·∫°o stream orderbook
        depth_stream = f"{symbol.lower()}@depth5@100ms"
        depth_url = f"wss://fstream.binance.com/ws/{depth_stream}"
        
        # X·ª≠ l√Ω tin nh·∫Øn trade
        def trade_on_message(ws, message):
            try:
                data = json.loads(message)
                if 'p' in data:
                    price = float(data['p'])
                    self.data_manager.update_price(symbol, price)
                    if callback:
                        callback(price)
            except Exception as e:
                logger.error(f"Trade stream error: {str(e)}")
                
        # X·ª≠ l√Ω tin nh·∫Øn orderbook
        def depth_on_message(ws, message):
            try:
                data = json.loads(message)
                if 'b' in data and data['b'] and 'a' in data and data['a']:
                    bid = float(data['b'][0][0])
                    ask = float(data['a'][0][0])
                    bid_qty = sum(float(b[1]) for b in data['b'][:5])
                    ask_qty = sum(float(a[1]) for a in data['a'][:5])
                    self.data_manager.update_orderbook(symbol, bid, ask, bid_qty, ask_qty)
            except Exception as e:
                logger.error(f"Orderbook stream error: {str(e)}")
        
        # T·∫°o WebSocket cho gi√°
        trade_ws = websocket.WebSocketApp(
            trade_url,
            on_message=trade_on_message,
            on_error=lambda ws, err: logger.error(f"Trade WS error: {err}"),
            on_close=lambda ws: self._reconnect(symbol, 'trade', callback)
        )
        
        # T·∫°o WebSocket cho orderbook
        depth_ws = websocket.WebSocketApp(
            depth_url,
            on_message=depth_on_message,
            on_error=lambda ws, err: logger.error(f"Depth WS error: {err}"),
            on_close=lambda ws: self._reconnect(symbol, 'depth', callback)
        )
        
        # Kh·ªüi ch·∫°y trong lu·ªìng ri√™ng
        trade_thread = threading.Thread(target=trade_ws.run_forever, daemon=True)
        depth_thread = threading.Thread(target=depth_ws.run_forever, daemon=True)
        
        trade_thread.start()
        depth_thread.start()
        
        self.connections[symbol] = {
            'trade': {'ws': trade_ws, 'thread': trade_thread},
            'depth': {'ws': depth_ws, 'thread': depth_thread}
        }
        
    def _reconnect(self, symbol, stream_type, callback):
        logger.info(f"Reconnecting {symbol} {stream_type}")
        time.sleep(1)
        self._create_connection(symbol, callback)
                
    def remove_symbol(self, symbol):
        if symbol in self.connections:
            try:
                self.connections[symbol]['trade']['ws'].close()
                self.connections[symbol]['depth']['ws'].close()
            except:
                pass
            del self.connections[symbol]
                
    def stop(self):
        self._stop_event.set()
        for symbol in list(self.connections.keys()):
            self.remove_symbol(symbol)

# ========== BOT GIAO D·ªäCH T·ªêC ƒê·ªò CAO ==========
class HighFrequencyTrader:
    def __init__(self, symbol, leverage, risk_percent, data_manager, ws_manager):
        self.symbol = symbol.upper()
        self.leverage = leverage
        self.risk_percent = risk_percent
        self.data_manager = data_manager
        self.ws_manager = ws_manager
        self.running = True
        self.position_size = 0
        self.symbol_info = self._get_symbol_info()
        
        # ƒêƒÉng k√Ω d·ªØ li·ªáu
        self.ws_manager.add_symbol(self.symbol, self._price_update)
        
        # B·∫Øt ƒë·∫ßu lu·ªìng giao d·ªãch
        self.thread = threading.Thread(target=self._trade_loop, daemon=True)
        self.thread.start()
        
        logger.info(f"Started HFT bot for {self.symbol}")
        send_telegram(f"üöÄ <b>HFT BOT STARTED</b>\nSymbol: {self.symbol}\nLeverage: {leverage}x\nRisk: {risk_percent}%")

    def _price_update(self, price):
        """X·ª≠ l√Ω c·∫≠p nh·∫≠t gi√°"""
        pass

    def _get_symbol_info(self):
        """L·∫•y th√¥ng tin symbol"""
        url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
        data = binance_api_request(url)
        if data:
            for s in data['symbols']:
                if s['symbol'] == self.symbol:
                    info = {}
                    for f in s['filters']:
                        if f['filterType'] == 'LOT_SIZE':
                            info['min_qty'] = float(f['minQty'])
                            info['step_size'] = float(f['stepSize'])
                        elif f['filterType'] == 'PRICE_FILTER':
                            info['tick_size'] = float(f['tickSize'])
                    return info
        return {'min_qty': 0.001, 'step_size': 0.001, 'tick_size': 0.01}

    def _get_balance(self):
        """L·∫•y s·ªë d∆∞ t√†i kho·∫£n"""
        try:
            ts = int(time.time() * 1000)
            params = {"timestamp": ts}
            query = urllib.parse.urlencode(params)
            sig = sign(query)
            url = f"https://fapi.binance.com/fapi/v2/account?{query}&signature={sig}"
            headers = {'X-MBX-APIKEY': BINANCE_API_KEY}
            
            data = binance_api_request(url, headers=headers)
            if data:
                for asset in data['assets']:
                    if asset['asset'] == 'USDT':
                        return float(asset['availableBalance'])
        except Exception:
            pass
        return 0

    def _calculate_position_size(self):
        """T√≠nh to√°n k√≠ch th∆∞·ªõc v·ªã th·∫ø"""
        balance = self._get_balance()
        if balance <= 0:
            return 0
            
        risk_amount = balance * (self.risk_percent / 100)
        price = self.data_manager.get_last_price(self.symbol)
        if price <= 0:
            return 0
            
        size = (risk_amount * self.leverage) / price
        step = self.symbol_info.get('step_size', 0.001)
        
        # L√†m tr√≤n theo step size
        if step > 0:
            size = round(size / step) * step
            
        return max(size, self.symbol_info.get('min_qty', 0.001))

    def _place_order(self, side, quantity, price):
        """ƒê·∫∑t l·ªánh t·ªëc ƒë·ªô cao"""
        try:
            ts = int(time.time() * 1000)
            params = {
                "symbol": self.symbol,
                "side": side,
                "type": "LIMIT",
                "timeInForce": "IOC",
                "quantity": quantity,
                "price": price,
                "timestamp": ts
            }
            
            query = urllib.parse.urlencode(params)
            sig = sign(query)
            url = f"https://fapi.binance.com/fapi/v1/order?{query}&signature={sig}"
            headers = {'X-MBX-APIKEY': BINANCE_API_KEY}
            
            # G·ª≠i trong lu·ªìng ri√™ng ƒë·ªÉ kh√¥ng ch·∫∑n lu·ªìng ch√≠nh
            threading.Thread(
                target=requests.post, 
                args=(url,), 
                kwargs={'headers': headers, 'timeout': 0.3}
            ).start()
            
            return True
        except Exception as e:
            logger.error(f"Order placement error: {str(e)}")
            return False

    def _generate_signal(self):
        """T·∫°o t√≠n hi·ªáu giao d·ªãch v·ªõi ƒë·ªô ch√≠nh x√°c cao"""
        try:
            # L·∫•y d·ªØ li·ªáu th·ªã tr∆∞·ªùng
            prices = self.data_manager.get_prices(self.symbol, 20)
            if len(prices) < 10:
                return None, 0
                
            orderbook = self.data_manager.get_orderbook(self.symbol)
            
            # T√≠nh to√°n ƒë·ªông l∆∞·ª£ng
            price_change = prices[-1] - prices[-5]
            avg_volume = np.mean(prices[-10:])
            volume_ratio = prices[-1] / avg_volume if avg_volume > 0 else 1
            
            # Ph√¢n t√≠ch order book
            imbalance = (orderbook['bid_qty'] - orderbook['ask_qty']) / (orderbook['bid_qty'] + orderbook['ask_qty'] + 1e-10)
            spread = orderbook['ask'] - orderbook['bid']
            
            # T·∫°o ƒëi·ªÉm t√≠n hi·ªáu
            signal_score = 0
            direction = None
            
            # T√≠n hi·ªáu mua
            if price_change > 0 and volume_ratio > 1.2 and imbalance > 0.1:
                signal_score = 95 + min(5, imbalance * 100)
                direction = "BUY"
                
            # T√≠n hi·ªáu b√°n
            elif price_change < 0 and volume_ratio < 0.8 and imbalance < -0.1:
                signal_score = 95 + min(5, abs(imbalance) * 100)
                direction = "SELL"
                
            return direction, signal_score
        except Exception as e:
            logger.error(f"Signal generation error: {str(e)}")
            return None, 0

    def _execute_trade(self):
        """Th·ª±c thi giao d·ªãch t·ªëc ƒë·ªô cao"""
        start_time = time.time()
        
        # T·∫°o t√≠n hi·ªáu
        direction, confidence = self._generate_signal()
        if confidence < 95:
            return False
            
        # T√≠nh to√°n v·ªã th·∫ø
        if self.position_size <= 0:
            self.position_size = self._calculate_position_size()
            if self.position_size <= 0:
                return False
                
        # L·∫•y gi√° m·ª•c ti√™u
        orderbook = self.data_manager.get_orderbook(self.symbol)
        if direction == "BUY":
            price = orderbook['ask'] + self.symbol_info.get('tick_size', 0.01)
        else:
            price = orderbook['bid'] - self.symbol_info.get('tick_size', 0.01)
            
        # ƒê·∫∑t l·ªánh
        self._place_order(direction, self.position_size, price)
        
        # Ghi log hi·ªáu su·∫•t
        exec_time = (time.time() - start_time) * 1000
        logger.info(f"Executed {direction} order in {exec_time:.2f}ms | Confidence: {confidence}%")
        send_telegram(f"‚ö° <b>TRADE EXECUTED</b>\n"
                      f"Symbol: {self.symbol}\n"
                      f"Direction: {direction}\n"
                      f"Size: {self.position_size:.4f}\n"
                      f"Price: {price:.4f}\n"
                      f"Exec Time: {exec_time:.2f}ms")
        
        return True

    def _trade_loop(self):
        """V√≤ng l·∫∑p giao d·ªãch ch√≠nh"""
        while self.running:
            try:
                self._execute_trade()
                # T·ªëi ∆∞u th·ªùi gian ch·ªù ƒë·ªÉ ƒë·∫°t 50 l·∫ßn/gi√¢y
                time.sleep(0.02)
            except Exception as e:
                logger.error(f"Trade loop error: {str(e)}")
                time.sleep(1)

    def stop(self):
        """D·ª´ng bot"""
        self.running = False
        self.ws_manager.remove_symbol(self.symbol)
        logger.info(f"Stopped HFT bot for {self.symbol}")
        send_telegram(f"üõë <b>HFT BOT STOPPED</b>\nSymbol: {self.symbol}")

# ========== QU·∫¢N L√ù H·ªÜ TH·ªêNG V√Ä TELEGRAM ==========
class BotManager:
    def __init__(self):
        self.data_manager = DataManager()
        self.ws_manager = WebSocketManager(self.data_manager)
        self.bots = {}
        self.running = True
        self.start_time = time.time()
        self.user_states = {}  # L∆∞u tr·∫°ng th√°i ng∆∞·ªùi d√πng
        self.admin_chat_id = TELEGRAM_CHAT_ID
        
        # B·∫Øt ƒë·∫ßu c√°c bot t·ª´ c·∫•u h√¨nh
        for config in BOT_CONFIGS:
            if len(config) >= 3:
                self.add_bot(config[0], config[1], config[2])
        
        logger.info("HFT Trading System Initialized")
        send_telegram("üöÄ <b>HFT TRADING SYSTEM STARTED</b>")
        
        # Lu·ªìng gi√°m s√°t
        self.monitor_thread = threading.Thread(target=self._monitor, daemon=True)
        self.monitor_thread.start()
        
        # Lu·ªìng x·ª≠ l√Ω Telegram
        self.telegram_thread = threading.Thread(target=self._telegram_listener, daemon=True)
        self.telegram_thread.start()
        
        # G·ª≠i menu ch√≠nh khi kh·ªüi ƒë·ªông
        if self.admin_chat_id:
            self.send_main_menu(self.admin_chat_id)

    def log(self, message):
        """Ghi log h·ªá th·ªëng v√† g·ª≠i Telegram"""
        logger.info(f"[SYSTEM] {message}")
        send_telegram(f"<b>SYSTEM</b>: {message}")

    def send_main_menu(self, chat_id):
        """G·ª≠i menu ch√≠nh cho ng∆∞·ªùi d√πng"""
        welcome = (
            "ü§ñ <b>HFT TRADING BOT</b>\n\n"
            "Ch·ªçn m·ªôt trong c√°c t√πy ch·ªçn b√™n d∆∞·ªõi:"
        )
        send_telegram(welcome, chat_id, create_menu_keyboard())

    def add_bot(self, symbol, leverage, risk_percent):
        symbol = symbol.upper()
        if symbol in self.bots:
            self.log(f"‚ö†Ô∏è ƒê√£ c√≥ bot cho {symbol}")
            return False
            
        # Ki·ªÉm tra API key
        if not BINANCE_API_KEY or not BINANCE_SECRET_KEY:
            self.log("‚ùå Ch∆∞a c·∫•u h√¨nh API Key v√† Secret Key!")
            return False
            
        try:
            # T·∫°o bot m·ªõi
            bot = HighFrequencyTrader(
                symbol, leverage, risk_percent,
                self.data_manager, self.ws_manager
            )
            self.bots[symbol] = bot
            self.log(f"‚úÖ ƒê√£ th√™m bot: {symbol} | ƒêB: {leverage}x | %: {risk_percent}")
            return True
            
        except Exception as e:
            self.log(f"‚ùå L·ªói t·∫°o bot {symbol}: {str(e)}")
            return False

    def stop_bot(self, symbol):
        symbol = symbol.upper()
        bot = self.bots.get(symbol)
        if bot:
            bot.stop()
            self.log(f"‚õî ƒê√£ d·ª´ng bot cho {symbol}")
            del self.bots[symbol]
            return True
        return False

    def stop_all(self):
        self.log("‚õî ƒêang d·ª´ng t·∫•t c·∫£ bot...")
        for symbol in list(self.bots.keys()):
            self.stop_bot(symbol)
        self.ws_manager.stop()
        self.running = False
        self.log("üî¥ H·ªá th·ªëng ƒë√£ d·ª´ng")

    def _monitor(self):
        """Ki·ªÉm tra v√† b√°o c√°o tr·∫°ng th√°i ƒë·ªãnh k·ª≥"""
        while self.running:
            try:
                # T√≠nh th·ªùi gian ho·∫°t ƒë·ªông
                uptime = time.time() - self.start_time
                hours, rem = divmod(uptime, 3600)
                minutes, seconds = divmod(rem, 60)
                uptime_str = f"{int(hours)}h {int(minutes)}m {int(seconds)}s"
                
                # B√°o c√°o s·ªë bot ƒëang ch·∫°y
                active_bots = [s for s, b in self.bots.items() if b.running]
                
                # B√°o c√°o s·ªë d∆∞ t√†i kho·∫£n
                balance = get_balance()
                
                # T·∫°o b√°o c√°o
                status_msg = (
                    f"üìä <b>B√ÅO C√ÅO H·ªÜ TH·ªêNG</b>\n"
                    f"‚è± Th·ªùi gian ho·∫°t ƒë·ªông: {uptime_str}\n"
                    f"ü§ñ S·ªë bot ƒëang ch·∫°y: {len(active_bots)}\n"
                    f"üìà Bot ho·∫°t ƒë·ªông: {', '.join(active_bots) if active_bots else 'Kh√¥ng c√≥'}\n"
                    f"üí∞ S·ªë d∆∞ kh·∫£ d·ª•ng: {balance:.2f} USDT"
                )
                send_telegram(status_msg)
                
            except Exception as e:
                logger.error(f"L·ªói b√°o c√°o tr·∫°ng th√°i: {str(e)}")
            
            # Ki·ªÉm tra m·ªói 6 gi·ªù
            time.sleep(6 * 3600)

    def _telegram_listener(self):
        """L·∫Øng nghe v√† x·ª≠ l√Ω tin nh·∫Øn t·ª´ Telegram"""
        last_update_id = 0
        
        while self.running:
            try:
                # L·∫•y tin nh·∫Øn m·ªõi
                url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates?offset={last_update_id+1}&timeout=30"
                response = requests.get(url, timeout=35)
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('ok'):
                        for update in data['result']:
                            update_id = update['update_id']
                            message = update.get('message', {})
                            chat_id = str(message.get('chat', {}).get('id'))
                            text = message.get('text', '').strip()
                            
                            # Ch·ªâ x·ª≠ l√Ω tin nh·∫Øn t·ª´ admin
                            if chat_id != self.admin_chat_id:
                                continue
                            
                            # C·∫≠p nh·∫≠t ID tin nh·∫Øn cu·ªëi
                            if update_id > last_update_id:
                                last_update_id = update_id
                            
                            # X·ª≠ l√Ω tin nh·∫Øn
                            self._handle_telegram_message(chat_id, text)
                elif response.status_code == 409:
                    logger.error("L·ªói xung ƒë·ªôt: Ch·ªâ m·ªôt instance bot c√≥ th·ªÉ l·∫Øng nghe Telegram")
                    break
                
            except Exception as e:
                logger.error(f"L·ªói Telegram listener: {str(e)}")
                time.sleep(5)

    def _handle_telegram_message(self, chat_id, text):
        """X·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng"""
        # L∆∞u tr·∫°ng th√°i ng∆∞·ªùi d√πng
        user_state = self.user_states.get(chat_id, {})
        current_step = user_state.get('step')
        
        # X·ª≠ l√Ω theo b∆∞·ªõc hi·ªán t·∫°i
        if current_step == 'waiting_symbol':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_menu_keyboard())
            else:
                symbol = text.upper()
                self.user_states[chat_id] = {
                    'step': 'waiting_leverage',
                    'symbol': symbol
                }
                send_telegram(f"Ch·ªçn ƒë√≤n b·∫©y cho {symbol}:", chat_id, create_leverage_keyboard())
        
        elif current_step == 'waiting_leverage':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_menu_keyboard())
            elif 'x' in text:
                leverage = int(text.replace('x', '').strip())
                user_state['leverage'] = leverage
                user_state['step'] = 'waiting_percent'
                send_telegram(
                    f"üìå C·∫∑p: {user_state['symbol']}\nƒê√≤n b·∫©y: {leverage}x\n\nNh·∫≠p % r·ªßi ro m·ªói l·ªánh (1-100):",
                    chat_id,
                    create_cancel_keyboard()
                )
        
        elif current_step == 'waiting_percent':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_menu_keyboard())
            else:
                try:
                    percent = float(text)
                    if 1 <= percent <= 100:
                        # Th√™m bot
                        symbol = user_state['symbol']
                        leverage = user_state['leverage']
                        
                        if self.add_bot(symbol, leverage, percent):
                            send_telegram(
                                f"‚úÖ <b>ƒê√É TH√äM BOT TH√ÄNH C√îNG</b>\n\n"
                                f"üìå C·∫∑p: {symbol}\n"
                                f"ƒê√≤n b·∫©y: {leverage}x\n"
                                f"üìä % R·ªßi ro: {percent}%",
                                chat_id,
                                create_menu_keyboard()
                            )
                        else:
                            send_telegram("‚ùå Kh√¥ng th·ªÉ th√™m bot, vui l√≤ng ki·ªÉm tra log", chat_id, create_menu_keyboard())
                        
                        # Reset tr·∫°ng th√°i
                        self.user_states[chat_id] = {}
                    else:
                        send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p % t·ª´ 1-100", chat_id)
                except:
                    send_telegram("‚ö†Ô∏è Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p s·ªë", chat_id)
        
        # X·ª≠ l√Ω c√°c l·ªánh ch√≠nh
        elif text == "üìä Danh s√°ch Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id)
            else:
                message = "ü§ñ <b>DANH S√ÅCH BOT ƒêANG CH·∫†Y</b>\n\n"
                for symbol, bot in self.bots.items():
                    status = "üü¢ ƒêang ch·∫°y" if bot.running else "üî¥ ƒê√£ d·ª´ng"
                    message += f"üîπ {symbol} | {status}\n"
                send_telegram(message, chat_id)
        
        elif text == "‚ûï Th√™m Bot":
            self.user_states[chat_id] = {'step': 'waiting_symbol'}
            send_telegram("Ch·ªçn c·∫∑p coin:", chat_id, create_symbols_keyboard())
        
        elif text == "‚õî D·ª´ng Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id)
            else:
                message = "‚õî <b>CH·ªåN BOT ƒê·ªÇ D·ª™NG</b>\n\n"
                keyboard = []
                row = []
                
                for i, symbol in enumerate(self.bots.keys()):
                    message += f"üîπ {symbol}\n"
                    row.append({"text": f"‚õî {symbol}"})
                    if len(row) == 2 or i == len(self.bots) - 1:
                        keyboard.append(row)
                        row = []
                
                keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
                
                send_telegram(
                    message, 
                    chat_id, 
                    {"keyboard": keyboard, "resize_keyboard": True, "one_time_keyboard": True}
                )
        
        elif text.startswith("‚õî "):
            symbol = text.replace("‚õî ", "").strip().upper()
            if symbol in self.bots:
                self.stop_bot(symbol)
                send_telegram(f"‚õî ƒê√£ g·ª≠i l·ªánh d·ª´ng bot {symbol}", chat_id, create_menu_keyboard())
            else:
                send_telegram(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y bot {symbol}", chat_id, create_menu_keyboard())
        
        elif text == "üí∞ S·ªë d∆∞ t√†i kho·∫£n":
            try:
                balance = get_balance()
                send_telegram(f"üí∞ <b>S·ªê D∆Ø KH·∫¢ D·ª§NG</b>: {balance:.2f} USDT", chat_id)
            except Exception as e:
                send_telegram(f"‚ö†Ô∏è L·ªói l·∫•y s·ªë d∆∞: {str(e)}", chat_id)
        
        elif text == "üìà V·ªã th·∫ø ƒëang m·ªü":
            try:
                positions = get_positions()
                if not positions:
                    send_telegram("üì≠ Kh√¥ng c√≥ v·ªã th·∫ø n√†o ƒëang m·ªü", chat_id)
                    return
                
                message = "üìà <b>V·ªä TH·∫æ ƒêANG M·ªû</b>\n\n"
                for pos in positions:
                    position_amt = float(pos.get('positionAmt', 0))
                    if position_amt != 0:
                        symbol = pos.get('symbol', 'UNKNOWN')
                        entry = float(pos.get('entryPrice', 0))
                        side = "LONG" if position_amt > 0 else "SHORT"
                        pnl = float(pos.get('unRealizedProfit', 0))
                        
                        message += (
                            f"üîπ {symbol} | {side}\n"
                            f"üìä Kh·ªëi l∆∞·ª£ng: {abs(position_amt):.4f}\n"
                            f"üè∑Ô∏è Gi√° v√†o: {entry:.4f}\n"
                            f"üí∞ PnL: {pnl:.2f} USDT\n\n"
                        )
                
                send_telegram(message, chat_id)
            except Exception as e:
                send_telegram(f"‚ö†Ô∏è L·ªói l·∫•y v·ªã th·∫ø: {str(e)}", chat_id)
        
        # G·ª≠i l·∫°i menu n·∫øu kh√¥ng c√≥ l·ªánh ph√π h·ª£p
        elif text:
            self.send_main_menu(chat_id)

# ========== H√ÄM KH·ªûI CH·∫†Y CH√çNH ==========
def main():
    # Ki·ªÉm tra API keys
    if not BINANCE_API_KEY or not BINANCE_SECRET_KEY:
        logger.error("Binance API keys not configured!")
        send_telegram("‚ùå <b>ERROR:</b> Binance API keys missing!")
        sys.exit(1)
    
    # Kh·ªüi t·∫°o h·ªá th·ªëng
    manager = BotManager()
    
    try:
        # Th√¥ng b√°o s·ªë d∆∞ ban ƒë·∫ßu
        try:
            balance = get_balance()
            manager.log(f"üí∞ S·ªê D∆Ø BAN ƒê·∫¶U: {balance:.2f} USDT")
        except Exception as e:
            manager.log(f"‚ö†Ô∏è L·ªói l·∫•y s·ªë d∆∞ ban ƒë·∫ßu: {str(e)}")
        
        # Gi·ªØ ch∆∞∆°ng tr√¨nh ch·∫°y
        while manager.running:
            time.sleep(1)
            
    except KeyboardInterrupt:
        manager.log("üëã Nh·∫≠n t√≠n hi·ªáu d·ª´ng t·ª´ ng∆∞·ªùi d√πng...")
    except Exception as e:
        manager.log(f"‚ö†Ô∏è L·ªñI H·ªÜ TH·ªêNG NGHI√äM TR·ªåNG: {str(e)}")
    finally:
        manager.stop_all()

if __name__ == "__main__":
    main()
