# main.py
from trading_bot_lib import BotManager
import os
import json
import time
import logging

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger()

# L·∫•y c·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
BINANCE_API_KEY = os.getenv('BINANCE_API_KEY', '')
BINANCE_SECRET_KEY = os.getenv('BINANCE_SECRET_KEY', '')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '')

# In ra ƒë·ªÉ ki·ªÉm tra (kh√¥ng in secret key)
print(f"BINANCE_API_KEY: {'***' if BINANCE_API_KEY else 'Kh√¥ng c√≥'}")
print(f"BINANCE_SECRET_KEY: {'***' if BINANCE_SECRET_KEY else 'Kh√¥ng c√≥'}")
print(f"TELEGRAM_BOT_TOKEN: {'***' if TELEGRAM_BOT_TOKEN else 'Kh√¥ng c√≥'}")
print(f"TELEGRAM_CHAT_ID: {TELEGRAM_CHAT_ID if TELEGRAM_CHAT_ID else 'Kh√¥ng c√≥'}")

def test_connections():
    """Ki·ªÉm tra k·∫øt n·ªëi API v√† Telegram"""
    from trading_bot_lib import get_balance, send_telegram
    
    # Test Binance
    if BINANCE_API_KEY and BINANCE_SECRET_KEY:
        balance = get_balance(BINANCE_API_KEY, BINANCE_SECRET_KEY)
        if balance > 0:
            print(f"‚úÖ K·∫øt n·ªëi Binance th√†nh c√¥ng! S·ªë d∆∞: {balance:.2f} USDT")
        else:
            print("‚ùå L·ªói k·∫øt n·ªëi Binance")
            return False
    
    # Test Telegram
    if TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID:
        try:
            send_telegram("ü§ñ Bot kh·ªüi ƒë·ªông th√†nh c√¥ng!", 
                         TELEGRAM_CHAT_ID, 
                         bot_token=TELEGRAM_BOT_TOKEN)
            print("‚úÖ K·∫øt n·ªëi Telegram th√†nh c√¥ng!")
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi Telegram: {e}")
    
    return True

def main():
    # Ki·ªÉm tra c·∫•u h√¨nh
    if not BINANCE_API_KEY or not BINANCE_SECRET_KEY:
        print("‚ùå Ch∆∞a c·∫•u h√¨nh API Key v√† Secret Key!")
        print("üí° Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng:")
        print("   - BINANCE_API_KEY")
        print("   - BINANCE_SECRET_KEY") 
        return
    
    # Ki·ªÉm tra k·∫øt n·ªëi
    if not test_connections():
        return
    
    print("üü¢ ƒêang kh·ªüi ƒë·ªông h·ªá th·ªëng bot...")
    
    try:
        # Kh·ªüi t·∫°o h·ªá th·ªëng
        manager = BotManager(
            api_key=BINANCE_API_KEY,
            api_secret=BINANCE_SECRET_KEY,
            telegram_bot_token=TELEGRAM_BOT_TOKEN,
            telegram_chat_id=TELEGRAM_CHAT_ID
        )
        
        # Th√™m bot m·∫´u (c√≥ th·ªÉ x√≥a ho·∫∑c thay ƒë·ªïi)
        print("ü§ñ ƒêang th√™m bot m·∫´u...")
        
        # Bot RSI/EMA
        manager.add_bot(
            symbol="BTCUSDT",
            lev=10,
            percent=5, 
            tp=50,
            sl=20,
            strategy_type="RSI/EMA Recursive"
        )
        
        # Bot Reverse 24h
        manager.add_bot(
            symbol="ETHUSDT",
            lev=15, 
            percent=3,
            tp=30,
            sl=15,
            strategy_type="Reverse 24h",
            threshold=25
        )
        
        print("üü¢ H·ªá th·ªëng ƒë√£ s·∫µn s√†ng. ƒêang ch·∫°y...")
        
        # Gi·ªØ ch∆∞∆°ng tr√¨nh ch·∫°y
        while manager.running:
            time.sleep(1)
            
    except KeyboardInterrupt:
        print("\nüëã Nh·∫≠n t√≠n hi·ªáu d·ª´ng t·ª´ ng∆∞·ªùi d√πng...")
        if 'manager' in locals():
            manager.log("üëã Nh·∫≠n t√≠n hi·ªáu d·ª´ng t·ª´ ng∆∞·ªùi d√πng...")
    except Exception as e:
        print(f"‚ùå L·ªñI H·ªÜ TH·ªêNG: {str(e)}")
        if 'manager' in locals():
            manager.log(f"‚ùå L·ªñI H·ªÜ TH·ªêNG: {str(e)}")
    finally:
        if 'manager' in locals():
            manager.stop_all()

if __name__ == "__main__":
    main()
